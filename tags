!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
COMP_LATENCY	output_preprocessor.v	/^	parameter COMP_LATENCY	= 1								\/\/ computation latency in clock cycles$/;"	c
COMP_LATENCY	output_preprocessor_new.v	/^	parameter COMP_LATENCY	= 3,								\/\/ computation latency in clock cycles$/;"	c
MULT_INIT	output_preprocessor_new.v	/^	parameter MULT_INIT		= 1								\/\/ initial output multiplier$/;"	c
N_ADC	clk_sync.v	/^    parameter N_ADC     = 8$/;"	c
N_CHAN	dac_instr_queue.v	/^	parameter N_CHAN		= 8									\/\/ number of DAC channels (must be >1)$/;"	c
N_CHAN	instr_dispatch.v	/^    parameter N_CHAN = 8,$/;"	c
N_IN	mux_n_chan.v	/^	parameter N_IN 	= 8									\/\/ number of input channels$/;"	c
N_LOG	frontpanel_interface.v	/^    parameter N_LOG = 8,$/;"	c
OK2X_LEN	pipe_tx_fifo.v	/^	parameter OK2X_LEN	= 17*(N_ADC+1),$/;"	c
OMIN_INIT	output_preprocessor_new.v	/^	parameter OMIN_INIT		= 1111,							\/\/ initial output lower bound$/;"	c
READ_LEN	pipe_tx_fifo.v	/^	parameter READ_LEN	= 1024,$/;"	c
W_CHAN	adc_controller.v	/^	parameter W_CHAN			= 3,									\/\/ width of channel select$/;"	c
W_CHAN	mux_n_chan.v	/^	parameter W_CHAN	= 16,									\/\/ width of input channels$/;"	c
W_CHAN	output_filter.v	/^    parameter W_CHAN = 5,$/;"	c
W_CHAN	oversample_filter.v	/^    parameter W_CHAN = 5,$/;"	c
W_CHAN	pid_filter.v	/^    parameter W_CHAN = 5,$/;"	c
W_CHAN	pid_pipeline.v	/^    parameter W_CHAN = 5,       \/\/ Width of output select signal$/;"	c
W_DATA	clk_sync.v	/^    parameter W_DATA    = 18,$/;"	c
W_DATA	dac_instr_queue.v	/^	parameter W_DATA		= 16,									\/\/ width of dac data signal$/;"	c
W_DOUT	output_filter.v	/^    parameter W_DOUT = 64,$/;"	c
W_DOUT	pid_filter.v	/^    parameter W_DOUT = 128,$/;"	c
W_DOUT	pid_pipeline.v	/^    parameter W_DOUT = 64,      \/\/ Width of output data$/;"	c
W_EP	pid_core.v	/^	parameter W_EP				= 16,								\/\/ width of opal kelly endpoints$/;"	c
W_IN	output_preprocessor.v	/^	parameter W_IN				= 64,								\/\/ width of input data bus$/;"	c
W_IN	output_preprocessor_new.v	/^	parameter W_IN				= 18,								\/\/ width of input data bus$/;"	c
W_IN	pid_core.v	/^	parameter W_IN				= 18,								\/\/ input data width$/;"	c
W_LDATA	frontpanel_interface.v	/^    parameter W_LDATA = 18,$/;"	c
W_MLT	output_preprocessor.v	/^	parameter W_MLT			= 10,								\/\/ width of multiplier$/;"	c
W_OPRNDS	pid_pipeline.v	/^    parameter W_OPRNDS = 16,    \/\/ Width of operands$/;"	c
W_OUT	adc_controller.v	/^	parameter W_OUT			= 18,									\/\/ width of adc data channels$/;"	c
W_RS	output_filter.v	/^    parameter W_RS = 8,$/;"	c
W_SRC	instr_dispatch.v	/^    parameter W_SRC = 5,$/;"	c
W_SRC	pid_pipeline.v	/^    parameter W_SRC = 5,        \/\/ Width of source select signal$/;"	c
W_SUM	oversample_filter.v	/^    parameter W_SUM = 128,$/;"	c
W_WR_ADDR	instr_dispatch.v	/^    parameter W_WR_ADDR = 16,$/;"	c
W_WR_ADDR	oversample_filter.v	/^    parameter W_WR_ADDR = 16,$/;"	c
W_WR_ADDR	pid_filter.v	/^    parameter W_WR_ADDR = 16,$/;"	c
W_WR_CHAN	output_filter.v	/^    parameter W_WR_CHAN = 16,$/;"	c
W_WR_CHAN	pid_pipeline.v	/^    parameter W_WR_CHAN = 16,   \/\/ Width of memory write channel$/;"	c
W_WR_DATA	instr_dispatch.v	/^    parameter W_WR_DATA = 48$/;"	c
W_WR_DATA	oversample_filter.v	/^    parameter W_WR_DATA = 48$/;"	c
W_WR_DATA	pid_filter.v	/^    parameter W_WR_DATA = 48$/;"	c
adc_controller	adc_controller.v	/^module adc_controller #($/;"	m
adc_cstart	pid_controller.v	/^wire adc_cstart;$/;"	n
adc_data_a	pid_controller.v	/^wire [W_ADC_DATA-1:0] adc_data_a;$/;"	n
adc_data_b	pid_controller.v	/^wire [W_ADC_DATA-1:0] adc_data_b;$/;"	n
adc_dv	pid_controller.v	/^wire adc_dv;$/;"	n
adc_os	pid_controller.v	/^reg [W_ADC_OS-1:0] adc_os = 1;$/;"	r
adc_src_a	pid_controller.v	/^wire [W_ADC_CHAN-1:0] adc_src_a;$/;"	n
adc_src_b	pid_controller.v	/^wire [W_ADC_CHAN-1:0] adc_src_b;$/;"	n
adc_sync_data	pid_controller.v	/^wire [W_ADC_DATA-1:0] adc_sync_data;$/;"	n
adc_sync_dv	pid_controller.v	/^wire adc_sync_dv;$/;"	n
adc_sync_src	pid_controller.v	/^wire [W_ADC_CHAN-1:0] adc_sync_src;$/;"	n
amp	dds_controller.v	/^reg	[9:0]		amp = 0;							\/\/ active amplitude value$/;"	r
amp_dv	dds_controller.v	/^reg				amp_dv = 0;						\/\/ amplitude data valid$/;"	r
amp_wr_instr	dds_controller.v	/^wire	[31:0] 	amp_wr_instr;					\/\/ amplitude write instruction$/;"	n
chan	dac_controller.v	/^reg	[3:0]	 chan = 0;$/;"	r
chan_a	clk_sync.v	/^reg [W_CHAN-1:0] chan_a = 0;$/;"	r
chan_b	clk_sync.v	/^reg [W_CHAN-1:0] chan_b = 0;$/;"	r
chan_en_mem	instr_dispatch.v	/^reg [N_CHAN-1:0] chan_en_mem;$/;"	r
chan_p1	output_filter.v	/^reg [W_CHAN-1:0] chan_p1 = 0;$/;"	r
chan_p1	oversample_filter.v	/^reg [W_CHAN-1:0] chan_p1 = 0;$/;"	r
chan_p1	pid_filter.v	/^reg [W_CHAN-1:0] chan_p1 = 0;$/;"	r
chan_p2	output_filter.v	/^reg [W_CHAN-1:0] chan_p2 = 0;$/;"	r
chan_p2	oversample_filter.v	/^reg [W_CHAN-1:0] chan_p2 = 0;$/;"	r
chan_p2	pid_filter.v	/^reg [W_CHAN-1:0] chan_p2 = 0;$/;"	r
chan_p3	output_filter.v	/^reg [W_CHAN-1:0] chan_p3 = 0;$/;"	r
chan_p3	oversample_filter.v	/^reg [W_CHAN-1:0] chan_p3 = 0;$/;"	r
chan_p3	pid_filter.v	/^reg [W_CHAN-1:0] chan_p3 = 0;$/;"	r
chan_p4	output_filter.v	/^reg [W_CHAN-1:0] chan_p4 = 0;$/;"	r
chan_p4	pid_filter.v	/^reg [W_CHAN-1:0] chan_p4 = 0;$/;"	r
chan_p5	pid_filter.v	/^reg [W_CHAN-1:0] chan_p5 = 0;$/;"	r
chan_p6	pid_filter.v	/^reg [W_CHAN-1:0] chan_p6 = 0;$/;"	r
chan_src_sel_mem	instr_dispatch.v	/^reg [W_SRC:0] chan_src_sel_mem[0:N_CHAN-1]; \/\/ channel to source mappings extra bit to indicate invalid routes$/;"	r
channel	dac_test.v	/^wire[3:0] channel;$/;"	n
channel	mux_n_chan.v	/^wire	[W_CHAN-1:0]	channel	[0:N_IN-1];$/;"	n
clk_sync	clk_sync.v	/^module clk_sync #($/;"	m
clr_mem	output_filter.v	/^reg [N_CHAN-1:0] clr_mem;$/;"	r
clr_mem	oversample_filter.v	/^reg [N_CHAN-1:0] clr_mem;$/;"	r
clr_mem	pid_filter.v	/^reg [N_CHAN-1:0] clr_mem;$/;"	r
control	dac_controller.v	/^wire	[3:0]	 control;$/;"	n
control	dac_test.v	/^wire[3:0] control;$/;"	n
count_mem	oversample_filter.v	/^reg [W_COUNT-1:0] count_mem[0:N_CHAN-1];$/;"	r
count_p1	oversample_filter.v	/^reg [W_COUNT-1:0] count_p1 = 0;$/;"	r
count_p2	oversample_filter.v	/^reg [W_COUNT-1:0] count_p2 = 0;$/;"	r
count_sat_p3	oversample_filter.v	/^reg count_sat_p3 = 0;$/;"	r
counter	dac_controller.v	/^reg	[7:0]		counter = 0;$/;"	r
counter	dac_instr_queue.v	/^reg	[W_CHS-1:0]					counter = 0;$/;"	r
counter	dac_test.v	/^reg[32:0] counter;$/;"	r
counter	dds_controller.v	/^reg	[31:0] 	counter = 0; 					\/\/ transmit counter$/;"	r
counter	output_preprocessor.v	/^reg			[7:0]					counter = 0; 				\/\/ intrastate counter$/;"	r
counter	pid_core.v	/^reg			[7:0] 			counter = 0; 					\/\/ intrastate counter$/;"	r
csb_reg	dds_controller.v	/^reg				csb_reg = 1;					\/\/ chip select$/;"	r
cur	utilities.v	/^	input cur, prev;$/;"	p
cur_state	clk_sync.v	/^reg [2:0] cur_state = ST_WAIT_DVH;$/;"	r
cur_state	dac_controller.v	/^reg	[2:0]		cur_state = ST_IDLE;$/;"	r
cur_state	dac_instr_queue.v	/^reg	[2:0]							cur_state = ST_IDLE;$/;"	r
cur_state	dac_test.v	/^reg[2:0] cur_state, next_state;$/;"	r
cur_state	dds_controller.v	/^reg	[2:0] 	cur_state = ST_IDLE;			\/\/ current state$/;"	r
cur_state	output_preprocessor.v	/^reg			[2:0]					cur_state = ST_IDLE;		\/\/ current state$/;"	r
cur_state	pid_core.v	/^reg			[2:0] 			cur_state = ST_IDLE;			\/\/ current state$/;"	r
cur_state	pipe_tx_fifo.v	/^reg	[2:0] 	cur_state;$/;"	r
cv_counter	adc_controller.v	/^reg	[7:0] 				cv_counter = 0; 						\/\/ convert state machine counter$/;"	r
cv_cur_state	adc_controller.v	/^reg	[2:0] 				cv_cur_state = CV_ST_IDLE;			\/\/ convert state machine current state$/;"	r
cv_next_state	adc_controller.v	/^reg	[2:0] 				cv_next_state = CV_ST_IDLE;		\/\/ convert state machine next state$/;"	r
dac_controller	dac_controller.v	/^module dac_controller #($/;"	m
dac_instr_queue	dac_instr_queue.v	/^module dac_instr_queue #($/;"	m
dac_ref_set	pid_controller.v	/^wire dac_ref_set;$/;"	n
dac_test	dac_test.v	/^module dac_test($/;"	m
dac_wr_done	pid_controller.v	/^wire dac_wr_done;$/;"	n
data	dac_controller.v	/^reg	[15:0] data = 0;$/;"	r
data	dac_test.v	/^wire[15:0] data;$/;"	n
data_a	clk_sync.v	/^reg [W_DATA-1:0] data_a = 0;$/;"	r
data_b	clk_sync.v	/^reg [W_DATA-1:0] data_b = 0;$/;"	r
data_instr	dac_controller.v	/^wire	[31:0] data_instr;$/;"	n
data_packed_reg	dac_instr_queue.v	/^reg	[W_DATA*N_CHAN-1:0]		data_packed_reg = 0;$/;"	r
data_valid_rdc	dac_instr_queue.v	/^wire									data_valid_rdc;$/;"	n
data_valid_reg	dac_instr_queue.v	/^reg	[N_CHAN-1:0]				data_valid_reg = 0;$/;"	r
dds_controller	dds_controller.v	/^module dds_controller($/;"	m
dec_chan	instr_dispatch.v	/^reg [W_CHAN-1:0] dec_chan;$/;"	r
dec_dv	instr_dispatch.v	/^wire dec_dv;$/;"	n
dec_instr_sent	instr_dispatch.v	/^reg [N_CHAN-1:0] dec_instr_sent;$/;"	r
diq_chan	pid_controller.v	/^wire [W_DAC_CHAN-1:0] diq_chan;$/;"	n
diq_data	pid_controller.v	/^wire [W_DAC_DATA-1:0] diq_data;$/;"	n
diq_dv	pid_controller.v	/^wire diq_dv;$/;"	n
dv	clk_sync.v	/^reg dv = 0;$/;"	r
dv_p1	output_filter.v	/^reg dv_p1 = 0;$/;"	r
dv_p1	oversample_filter.v	/^reg dv_p1 = 0;$/;"	r
dv_p1	pid_filter.v	/^reg dv_p1 = 0;$/;"	r
dv_p2	output_filter.v	/^reg dv_p2 = 0;$/;"	r
dv_p2	oversample_filter.v	/^reg dv_p2 = 0;$/;"	r
dv_p2	pid_filter.v	/^reg dv_p2 = 0;$/;"	r
dv_p3	output_filter.v	/^reg dv_p3 = 0;$/;"	r
dv_p3	oversample_filter.v	/^reg dv_p3 = 0;$/;"	r
dv_p3	pid_filter.v	/^reg dv_p3 = 0;$/;"	r
dv_p4	output_filter.v	/^reg dv_p4 = 0;$/;"	r
dv_p4	pid_filter.v	/^reg dv_p4 = 0;$/;"	r
dv_p5	pid_filter.v	/^reg dv_p5 = 0;$/;"	r
dv_p6	pid_filter.v	/^reg dv_p6 = 0;$/;"	r
dv_vect	adc_controller.v	/^wire	[N_CHAN\/2-1:0]		dv_vect;$/;"	n
feature	dac_controller.v	/^wire	[3:0]	 feature;$/;"	n
feature	dac_test.v	/^wire[3:0] feature;$/;"	n
fifo_almost_full	pipe_tx_fifo.v	/^wire fifo_almost_full, fifo_half_full, fifo_rd_en;$/;"	n
fifo_data	instr_dispatch.v	/^wire [W_DATA-1:0] fifo_data;$/;"	n
fifo_dout	pipe_tx_fifo.v	/^wire [15:0] fifo_dout;$/;"	n
fifo_dv	instr_dispatch.v	/^wire fifo_dv;$/;"	n
fifo_half_full	pipe_tx_fifo.v	/^wire fifo_almost_full, fifo_half_full, fifo_rd_en;$/;"	n
fifo_rd_en	instr_dispatch.v	/^wire fifo_rd_en;$/;"	n
fifo_rd_en	pipe_tx_fifo.v	/^wire fifo_almost_full, fifo_half_full, fifo_rd_en;$/;"	n
fifo_src	instr_dispatch.v	/^wire [W_SRC-1:0] fifo_src;$/;"	n
fifo_wr_en	dac_instr_queue.v	/^wire									fifo_wr_en;$/;"	n
freq	dds_controller.v	/^reg	[47:0]	freq = 0;						\/\/ active frequency value$/;"	r
freq_dv	dds_controller.v	/^reg				freq_dv = 0;					\/\/ frequency data valid$/;"	r
freq_wr_instr	dds_controller.v	/^wire	[63:0]	freq_wr_instr;					\/\/ frequency write instruction$/;"	n
frontpanel_interface	frontpanel_interface.v	/^module frontpanel_interface #($/;"	m
gp_trig	frontpanel_interface.v	/^wire [W_EP-1:0] gp_trig;$/;"	n
i	frontpanel_interface.v	/^reg [W_LCHAN-1:0] i;$/;"	r
i	instr_dispatch.v	/^reg [W_CHAN-1:0] i;$/;"	r
i	output_filter.v	/^reg [W_CHAN-1:0] i = 0;$/;"	r
i	oversample_filter.v	/^reg [W_CHAN-1:0] i = 0;$/;"	r
i	pid_filter.v	/^reg [W_CHAN-1:0] i;$/;"	r
idp_chan	pid_pipeline.v	/^wire [W_CHAN-1:0] idp_chan;$/;"	n
idp_data	pid_pipeline.v	/^wire [W_DIN-1:0] idp_data;$/;"	n
idp_dv	pid_pipeline.v	/^wire idp_dv;$/;"	n
input	clk_sync.v	/^    input wire                  reset_in,$/;"	c
input	dac_instr_queue.v	/^	input wire								reset_in,			\/\/ system reset$/;"	c
input	instr_dispatch.v	/^    input wire rst_in,$/;"	c
input	mux_n_chan.v	/^	input wire[W_SEL-1:0]			chan_select_in,	\/\/ channel select$/;"	c
input	output_preprocessor.v	/^	input wire								reset_in, 			\/\/ system reset$/;"	c
input	output_preprocessor_new.v	/^	input wire								reset_in, 			\/\/ system reset$/;"	c
input	oversample_filter.v	/^    input wire rst_in,$/;"	c
input	pid_filter.v	/^    input wire rst_in,$/;"	c
instr_dispatch	instr_dispatch.v	/^module instr_dispatch #($/;"	m
log_data_reg	frontpanel_interface.v	/^reg [W_LDATA-1:0] log_data_reg[0:N_LOG-1];$/;"	r
log_pipe_data	frontpanel_interface.v	/^wire [W_EP-1:0] log_pipe_data;$/;"	n
log_pipe_dv	frontpanel_interface.v	/^wire log_pipe_dv = ( log_chan == pipe_chan ) ? log_dv : 0);$/;"	n
log_pipe_rd	frontpanel_interface.v	/^wire log_pipe_rd;$/;"	n
mult_p1	output_filter.v	/^reg [W_MULT-1:0] mult_p1 = 0;$/;"	r
mux_dout	dac_instr_queue.v	/^wire	[W_DATA-1:0]				mux_dout;$/;"	n
mux_n_chan	mux_n_chan.v	/^module mux_n_chan #($/;"	m
next_state	clk_sync.v	/^reg [2:0] next_state = ST_WAIT_DVH;$/;"	r
next_state	dac_controller.v	/^reg	[2:0]		next_state = ST_IDLE;$/;"	r
next_state	dac_instr_queue.v	/^reg	[2:0]							next_state = ST_IDLE;$/;"	r
next_state	dac_test.v	/^reg[2:0] cur_state, next_state;$/;"	r
next_state	dds_controller.v	/^reg	[2:0] 	next_state = ST_IDLE; 		\/\/ next state$/;"	r
next_state	output_preprocessor.v	/^reg			[2:0]					next_state = ST_IDLE;	\/\/ next state$/;"	r
next_state	pid_core.v	/^reg			[2:0] 			next_state = ST_IDLE; 		\/\/ next state$/;"	r
next_state	pipe_tx_fifo.v	/^reg	[2:0] 	next_state;$/;"	r
ok1	frontpanel_interface.v	/^wire [30:0] ok1,$/;"	n
ok2x	frontpanel_interface.v	/^wire [17*(N_LOG+1)-1:0] ok2x;$/;"	n
opf_chan	pid_pipeline.v	/^wire [W_CHAN-1:0] opf_chan;$/;"	n
opf_data	pid_pipeline.v	/^wire [W_COMP-1:0] opf_data;$/;"	n
opf_dv	pid_pipeline.v	/^wire opf_dv;$/;"	n
opf_inject	pid_controller.v	/^wire [N_CHAN-1:0] opf_inject;$/;"	n
opf_inject0	frontpanel_interface.v	/^wire [W_EP-1:0] opf_inject1, opf_inject0;$/;"	n
opf_inject1	frontpanel_interface.v	/^wire [W_EP-1:0] opf_inject1, opf_inject0;$/;"	n
os_mem	oversample_filter.v	/^reg [W_OS-1:0] os_mem[0:N_CHAN-1];$/;"	r
os_p2	oversample_filter.v	/^reg [W_OS-1:0] os_p2 = 0;$/;"	r
osf_chan	pid_pipeline.v	/^wire [W_CHAN-1:0] osf_chan;$/;"	n
osf_data	pid_pipeline.v	/^wire [W_DIN-1:0] osf_data;$/;"	n
osf_dv	pid_pipeline.v	/^wire osf_dv;$/;"	n
output_filter	output_filter.v	/^module output_filter #($/;"	m
output_preprocessor	output_preprocessor.v	/^module output_preprocessor #($/;"	m
output_preprocessor	output_preprocessor_new.v	/^module output_preprocessor #($/;"	m
overflow	output_preprocessor_new.v	/^wire							overflow	[0:1];				\/\/ overflow indicator$/;"	n
overflow	pid_core.v	/^wire 								overflow;$/;"	n
overflow	utilities.v	/^function overflow;$/;"	f
oversample_filter	oversample_filter.v	/^module oversample_filter #($/;"	m
par_instr	dac_test.v	/^wire[31:0] par_instr, up_instr, ref_set_instr; \/\/ parallel data instruction$/;"	n
parameter	adc_controller.v	/^	parameter N_CHAN			= 8,									\/\/ number of channels to output$/;"	c
parameter	adc_controller.v	/^	parameter W_OS				= 2									\/\/ width of oversample signal$/;"	c
parameter	clk_sync.v	/^    parameter W_CHAN     = 3,$/;"	c
parameter	dac_instr_queue.v	/^	parameter W_CHS		= 3,									\/\/ width of dac channel select signal$/;"	c
parameter	frontpanel_interface.v	/^    parameter W_EP = 16$/;"	c
parameter	frontpanel_interface.v	/^    parameter W_LCHAN = 5,$/;"	c
parameter	instr_dispatch.v	/^    parameter W_CHAN = 5,$/;"	c
parameter	instr_dispatch.v	/^    parameter W_DATA = 18,$/;"	c
parameter	instr_dispatch.v	/^    parameter W_WR_CHAN = 16,$/;"	c
parameter	mux_n_chan.v	/^	parameter W_SEL	= 4,									\/\/ width of select signal$/;"	c
parameter	output_filter.v	/^    parameter W_DIN = 18,$/;"	c
parameter	output_filter.v	/^    parameter W_MULT = 8,$/;"	c
parameter	output_filter.v	/^    parameter W_WR_ADDR = 16,$/;"	c
parameter	output_filter.v	/^    parameter W_WR_DATA = 48$/;"	c
parameter	output_preprocessor.v	/^	parameter W_EP				= 16,								\/\/ width of opal kelly endpoint$/;"	c
parameter	output_preprocessor.v	/^	parameter W_OUT			= 16,								\/\/ width of output data bus$/;"	c
parameter	output_preprocessor_new.v	/^	parameter OMAX_INIT		= 9999,							\/\/ initial output upper bound$/;"	c
parameter	output_preprocessor_new.v	/^	parameter OUT_INIT		= 5000,							\/\/ initial output starting value$/;"	c
parameter	output_preprocessor_new.v	/^	parameter W_OUT			= 16,								\/\/ width of output data bus$/;"	c
parameter	oversample_filter.v	/^    parameter W_COUNT = 128,$/;"	c
parameter	oversample_filter.v	/^    parameter W_DATA = 18,$/;"	c
parameter	oversample_filter.v	/^    parameter W_WR_CHAN = 16,$/;"	c
parameter	pid_core.v	/^	parameter COMP_LATENCY	= 1								\/\/ pid computation latency in clock cycles$/;"	c
parameter	pid_core.v	/^	parameter W_OUT			= 64,								\/\/ output data width (set to be large to avoid overflow issues)$/;"	c
parameter	pid_filter.v	/^    parameter W_DIN = 18,$/;"	c
parameter	pid_filter.v	/^    parameter W_PID_COEFS = 16,$/;"	c
parameter	pid_filter.v	/^    parameter W_WR_CHAN = 16,$/;"	c
parameter	pid_pipeline.v	/^    parameter N_CHAN = 5,       \/\/ Number of output channels$/;"	c
parameter	pid_pipeline.v	/^    parameter W_COMP = 128,     \/\/ Width of internal computation registers$/;"	c
parameter	pid_pipeline.v	/^    parameter W_DIN = 18,       \/\/ Width of source input data$/;"	c
parameter	pid_pipeline.v	/^    parameter W_WR_ADDR = 16,   \/\/ Width of memory write address$/;"	c
parameter	pid_pipeline.v	/^    parameter W_WR_DATA = 48    \/\/ Width of memory write data$/;"	c
parameter	pipe_tx_fifo.v	/^	parameter N_ADC		= 6,$/;"	c
parameter	pipe_tx_fifo.v	/^	parameter PIPE_ADDR	= 8'ha3$/;"	c
phase	dds_controller.v	/^reg	[13:0]	phase = 0;						\/\/ active phase value$/;"	r
phase_dv	dds_controller.v	/^reg				phase_dv = 0;					\/\/ phase data valid$/;"	r
phase_wr_instr	dds_controller.v	/^wire	[31:0] 	phase_wr_instr;				\/\/ phase write instruction$/;"	n
pid_chan	pid_controller.v	/^wire [W_EP-1:0] pid_chan;$/;"	n
pid_chan	pid_pipeline.v	/^wire [W_CHAN-1:0] pid_chan;$/;"	n
pid_controller	pid_controller.v	/^module pid_controller ($/;"	m
pid_core	pid_core.v	/^module pid_core #($/;"	m
pid_dac_chan	pid_controller.v	/^wire pid_dac_chan = pid_chan[W_DAC_CHAN-1:0];$/;"	n
pid_dac_data	pid_controller.v	/^wire pid_dac_data = pid_data[W_DAC_DATA-1:0];$/;"	n
pid_dac_dv	pid_controller.v	/^wire pid_dac_dv = (pid_chan < N_DAC) ? pid_dv : 0;$/;"	n
pid_data	pid_controller.v	/^wire [W_PID_DOUT-1:0] pid_data;$/;"	n
pid_data	pid_pipeline.v	/^wire [W_COMP-1:0] pid_data;$/;"	n
pid_dv	pid_controller.v	/^wire pid_dv;$/;"	n
pid_dv	pid_pipeline.v	/^wire pid_dv;$/;"	n
pid_filter	pid_filter.v	/^module pid_filter #($/;"	m
pid_pipeline	pid_pipeline.v	/^module pid_pipeline #($/;"	m
pipe_chan	frontpanel_interface.v	/^reg [W_LCHAN-1:0] pipe_chan;$/;"	r
pipe_read	pipe_tx_fifo.v	/^wire pipe_read;$/;"	n
pipe_tx_fifo	pipe_tx_fifo.v	/^module pipe_tx_fifo #($/;"	m
prefix	dac_controller.v	/^wire	[3:0]	 prefix;$/;"	n
prefix	dac_test.v	/^wire[3:0] prefix;$/;"	n
prev	utilities.v	/^	input cur, prev;$/;"	p
rd_count	pipe_tx_fifo.v	/^reg	[11:0]	rd_count;$/;"	r
rd_counter	adc_controller.v	/^reg	[7:0]					rd_counter = 0;						\/\/ read state machine counter$/;"	r
rd_cur_state	adc_controller.v	/^reg	[2:0]					rd_cur_state = RD_ST_IDLE;			\/\/ read state machine current state$/;"	r
rd_next_state	adc_controller.v	/^reg	[2:0]					rd_next_state = RD_ST_IDLE;		\/\/ read state machine next state$/;"	r
ref_set_instr	dac_controller.v	/^wire	[31:0] ref_set_instr;						\/\/ parallel data instruction$/;"	n
ref_set_instr	dac_test.v	/^wire[31:0] par_instr, up_instr, ref_set_instr; \/\/ parallel data instruction$/;"	n
reg	adc_controller.v	/^	output reg				[W_CHAN-1:0]		chan_a_out,			\/\/ line a adc channel$/;"	p
reg	adc_controller.v	/^	output reg				[W_CHAN-1:0]		chan_b_out,			\/\/ line b adc channel$/;"	p
reg	adc_controller.v	/^	output reg signed		[W_OUT-1:0]		data_a_out,			\/\/ line a data out$/;"	p
reg	adc_controller.v	/^	output reg signed		[W_OUT-1:0]		data_b_out			\/\/ line b data out$/;"	p
reg	dac_test.v	/^	 output reg[15:0]		data_out,$/;"	p
reg	dac_test.v	/^	 output reg[3:0]		chan_out,$/;"	p
rs_mem	output_filter.v	/^reg [W_RS-1:0] rs_mem[0:N_CHAN-1];$/;"	r
rs_p2	output_filter.v	/^reg [W_RS-1:0] rs_p2 = 0;$/;"	r
signed	output_filter.v	/^reg signed [W_DIN-1:0] din_p1 = 0;$/;"	r
signed	output_filter.v	/^reg signed [W_DINT-1:0] dint_p3 = 0;$/;"	r
signed	output_filter.v	/^reg signed [W_DMULT-1:0] dmult_p2 = 0;$/;"	r
signed	output_filter.v	/^reg signed [W_DOUT-1:0] dout_p4 = 0;$/;"	r
signed	output_filter.v	/^reg signed [W_DOUT-1:0] dout_prev_mem[0:N_CHAN-1];$/;"	r
signed	output_filter.v	/^reg signed [W_DOUT-1:0] dout_prev_p2 = 0;$/;"	r
signed	output_filter.v	/^reg signed [W_DOUT-1:0] init_mem[0:N_CHAN-1];$/;"	r
signed	output_filter.v	/^reg signed [W_DOUT-1:0] max_mem[0:N_CHAN-1];$/;"	r
signed	output_filter.v	/^reg signed [W_DOUT-1:0] max_p3 = 0;$/;"	r
signed	output_filter.v	/^reg signed [W_DOUT-1:0] min_mem[0:N_CHAN-1];$/;"	r
signed	output_filter.v	/^reg signed [W_DOUT-1:0] min_p3 = 0;$/;"	r
signed	output_filter.v	/^reg signed [W_MULT-1:0] mult_mem[0:N_CHAN-1];$/;"	r
signed	output_preprocessor.v	/^reg signed	[W_IN-1:0]			pid_sum = 0;				\/\/ current pid sum$/;"	r
signed	output_preprocessor.v	/^reg signed	[W_OUT-1:0]			data_out_prev = 0;		\/\/ previous outputed data$/;"	r
signed	output_preprocessor.v	/^wire signed [W_IN+W_MLT-1:0]	proc_stage_0;$/;"	n
signed	output_preprocessor.v	/^wire signed [W_IN+W_MLT:0]		proc_stage_1,$/;"	n
signed	output_preprocessor_new.v	/^reg signed	[W_OUT-1:0]	multiplier = MULT_INIT; 	\/\/ active output multiplication factor$/;"	r
signed	output_preprocessor_new.v	/^reg signed	[W_OUT-1:0] data_out_prev = 0;			\/\/ previous outputed data$/;"	r
signed	output_preprocessor_new.v	/^reg signed	[W_OUT-1:0] lock_data_raw = 0;			\/\/ raw lock data$/;"	r
signed	output_preprocessor_new.v	/^reg signed	[W_OUT-1:0] output_init = OUT_INIT;	\/\/ active output initial value$/;"	r
signed	output_preprocessor_new.v	/^reg signed	[W_OUT-1:0] output_min = OMIN_INIT;		\/\/ active output lower bound$/;"	r
signed	output_preprocessor_new.v	/^reg signed 	[W_OUT-1:0] output_max = OMAX_INIT;		\/\/ active output upper bound$/;"	r
signed	output_preprocessor_new.v	/^wire signed	[W_OUT-1:0] proc_stage [0:4];				\/\/ data processing stages$/;"	n
signed	output_preprocessor_new.v	/^wire signed [W_OUT-1:0] proc_stage_clamped [0:1];	\/\/ clamped processing stage$/;"	n
signed	output_preprocessor_new.v	/^wire signed [W_OUT-1:0] proc_stage_pre [0:1];		\/\/ processing stage pre overflow check$/;"	n
signed	oversample_filter.v	/^reg signed [W_DATA-1:0] din_p1 = 0;$/;"	r
signed	oversample_filter.v	/^reg signed [W_DATA-1:0] dout_p3 = 0;$/;"	r
signed	oversample_filter.v	/^reg signed [W_SUM-1:0] max_sum = {W_SUM{1'b1}} >> 1;$/;"	r
signed	oversample_filter.v	/^reg signed [W_SUM-1:0] min_sum = ~max_sum;$/;"	r
signed	oversample_filter.v	/^reg signed [W_SUM-1:0] sum_mem[0:N_CHAN-1];$/;"	r
signed	oversample_filter.v	/^reg signed [W_SUM-1:0] sum_p1 = 0;$/;"	r
signed	oversample_filter.v	/^reg signed [W_SUM-1:0] sum_p3 = 0;$/;"	r
signed	oversample_filter.v	/^reg signed [W_SUM:0] sum_p2 = 0;$/;"	r
signed	pid_core.v	/^reg signed	[W_IN-1:0]		data = 0;						\/\/ active input data$/;"	r
signed	pid_core.v	/^reg signed	[W_IN:0]			e_prev_0 = 0;					\/\/ most recent previous error signal$/;"	r
signed	pid_core.v	/^reg signed	[W_IN:0]			e_prev_1 = 0;					\/\/ second most recent previous error signal$/;"	r
signed	pid_core.v	/^reg signed	[W_OUT-1:0]		u_prev = 0;						\/\/ previous pid filter output$/;"	r
signed	pid_core.v	/^wire signed	[W_EP+1:0]		k1, k2, k3; 					\/\/ z-transform coefficients for discrete PID filter$/;"	n
signed	pid_core.v	/^wire signed	[W_IN:0]			e_cur;							\/\/ current error signal$/;"	n
signed	pid_core.v	/^wire signed	[W_OUT-1:0]		delta_u;							\/\/ difference between current and previous pid filter outputs$/;"	n
signed	pid_core.v	/^wire signed	[W_OUT-1:0]		u_cur; 							\/\/ current pid filter output$/;"	n
signed	pid_core.v	/^wire signed [W_OUT-1:0]		u_cur_rail;$/;"	n
signed	pid_filter.v	/^reg signed [W_CE_PROD-1:0] ce_prod0_p3 = 0;$/;"	r
signed	pid_filter.v	/^reg signed [W_CE_PROD-1:0] ce_prod1_p3 = 0;$/;"	r
signed	pid_filter.v	/^reg signed [W_CE_PROD-1:0] ce_prod2_p3 = 0;$/;"	r
signed	pid_filter.v	/^reg signed [W_DELTA-1:0] delta_p4 = 0;$/;"	r
signed	pid_filter.v	/^reg signed [W_DIN-1:0] din_p1 = 0;$/;"	r
signed	pid_filter.v	/^reg signed [W_DIN-1:0] setpoint_mem[0:N_CHAN-1];$/;"	r
signed	pid_filter.v	/^reg signed [W_DIN-1:0] setpoint_p1 = 0;$/;"	r
signed	pid_filter.v	/^reg signed [W_DINT-1:0] dint_p5 = 0;$/;"	r
signed	pid_filter.v	/^reg signed [W_DOUT-1:0] dout_p6 = 0;$/;"	r
signed	pid_filter.v	/^reg signed [W_DOUT-1:0] dout_prev_mem[0:N_CHAN-1];$/;"	r
signed	pid_filter.v	/^reg signed [W_DOUT-1:0] dout_prev_p4 = 0;$/;"	r
signed	pid_filter.v	/^reg signed [W_DOUT-1:0] max_dout = {W_DOUT{1'b1}} >> 1;$/;"	r
signed	pid_filter.v	/^reg signed [W_DOUT-1:0] min_dout = ~max_dout;$/;"	r
signed	pid_filter.v	/^reg signed [W_ERROR-1:0] error_p2 = 0;$/;"	r
signed	pid_filter.v	/^reg signed [W_ERROR-1:0] error_prev0_mem[0:N_CHAN-1];$/;"	r
signed	pid_filter.v	/^reg signed [W_ERROR-1:0] error_prev0_p2 = 0;$/;"	r
signed	pid_filter.v	/^reg signed [W_ERROR-1:0] error_prev1_mem[0:N_CHAN-1];$/;"	r
signed	pid_filter.v	/^reg signed [W_ERROR-1:0] error_prev1_p2 = 0;$/;"	r
signed	pid_filter.v	/^reg signed [W_K_COEFS-1:0] k1_p2 = 0;$/;"	r
signed	pid_filter.v	/^reg signed [W_K_COEFS-1:0] k2_p2 = 0;$/;"	r
signed	pid_filter.v	/^reg signed [W_K_COEFS-1:0] k3_p2 = 0;$/;"	r
signed	pid_filter.v	/^reg signed [W_PID_COEFS-1:0] d_coef_mem[0:N_CHAN-1];$/;"	r
signed	pid_filter.v	/^reg signed [W_PID_COEFS-1:0] d_coef_p1 = 0;$/;"	r
signed	pid_filter.v	/^reg signed [W_PID_COEFS-1:0] i_coef_mem[0:N_CHAN-1];$/;"	r
signed	pid_filter.v	/^reg signed [W_PID_COEFS-1:0] i_coef_p1 = 0;$/;"	r
signed	pid_filter.v	/^reg signed [W_PID_COEFS-1:0] p_coef_mem[0:N_CHAN-1];$/;"	r
signed	pid_filter.v	/^reg signed [W_PID_COEFS-1:0] p_coef_p1 = 0;$/;"	r
sys_rst	pid_controller.v	/^wire sys_rst;$/;"	n
ticlk	frontpanel_interface.v	/^wire ticlk;$/;"	n
tx_data	dac_controller.v	/^reg	[31:0]	tx_data = 0;$/;"	r
tx_data	dac_test.v	/^reg[31:0] tx_data;$/;"	r
tx_data	dds_controller.v	/^reg	[63:0] 	tx_data = 0;					\/\/ active data to be sent to dds$/;"	r
tx_len	dds_controller.v	/^reg	[6:0]		tx_len = 0;						\/\/ length of current write instruction$/;"	r
up_instr	dac_test.v	/^wire[31:0] par_instr, up_instr, ref_set_instr; \/\/ parallel data instruction$/;"	n
utilities	utilities.v	/^module utilities();$/;"	m
wire	adc_controller.v	/^	input wire						busy_in,							\/\/ conversion busy signal$/;"	p
wire	adc_controller.v	/^	input wire						clk_in,							\/\/ adc serial clock; max frequency 17mhz$/;"	p
wire	adc_controller.v	/^	input wire						cstart_in,						\/\/ pulse starts continuous adc conversion cycle$/;"	p
wire	adc_controller.v	/^	input wire						data_a_in,						\/\/ serial data channel a$/;"	p
wire	adc_controller.v	/^	input wire						data_b_in,						\/\/ serial data channel b$/;"	p
wire	adc_controller.v	/^	input wire						reset_in, 						\/\/ system reset$/;"	p
wire	adc_controller.v	/^	input wire	[W_OS-1:0]		os_in,							\/\/ sets adc oversampling mode$/;"	p
wire	adc_controller.v	/^	output wire									dv_out,	\/\/ line a data valid$/;"	p
wire	adc_controller.v	/^	output wire						convst_out,						\/\/ convert start signal to adc$/;"	p
wire	adc_controller.v	/^	output wire						n_cs_out,						\/\/ chip select signal to adc$/;"	p
wire	adc_controller.v	/^	output wire						reset_out,						\/\/ reset signal to adc$/;"	p
wire	adc_controller.v	/^	output wire						sclk_out, 						\/\/ serial clock signal to adc$/;"	p
wire	adc_controller.v	/^	output wire	[W_OS-1:0]		os_out,							\/\/ oversampling signal to adc$/;"	p
wire	clk_sync.v	/^    input wire                  dv_in,$/;"	p
wire	clk_sync.v	/^    input wire  [W_CHAN-1:0]     chan_a_in,$/;"	p
wire	clk_sync.v	/^    input wire  [W_CHAN-1:0]     chan_b_in,$/;"	p
wire	clk_sync.v	/^    input wire  [W_DATA-1:0]    data_a_in,$/;"	p
wire	clk_sync.v	/^    input wire  [W_DATA-1:0]    data_b_in,$/;"	p
wire	clk_sync.v	/^    output wire [N_ADC-1:0]     dv_out,$/;"	p
wire	clk_sync.v	/^    output wire [W_CHAN-1:0]     chan_out,$/;"	p
wire	clk_sync.v	/^    output wire [W_DATA-1:0]    data_out$/;"	p
wire	dac_controller.v	/^	input wire						clk_in,$/;"	p
wire	dac_controller.v	/^	input wire						dv_in,$/;"	p
wire	dac_controller.v	/^	input wire						ref_set_in,		\/\/ dac sets reference voltage when asserted$/;"	p
wire	dac_controller.v	/^	input wire						reset_in,$/;"	p
wire	dac_controller.v	/^	input wire	[15:0]	data_in,$/;"	p
wire	dac_controller.v	/^	input wire	[2:0]		chan_in,$/;"	p
wire	dac_controller.v	/^	output wire						wr_done_out,	\/\/ pulsed when dac finishes the instruction send$/;"	p
wire	dac_controller.v	/^	output wire	[15:0]	data_out,		\/\/ output data$/;"	p
wire	dac_controller.v	/^	output wire	[2:0]		chan_out		\/\/ output data valid$/;"	p
wire	dac_controller.v	/^	output wire 					din_out, 		\/\/ serial data input$/;"	p
wire	dac_controller.v	/^	output wire 					nclr_out, 		\/\/ asynchronous clear$/;"	p
wire	dac_controller.v	/^	output wire 					nldac_out, 		\/\/ load DACs$/;"	p
wire	dac_controller.v	/^	output wire 					nsync_out, 		\/\/ enables input shift register to get data$/;"	p
wire	dac_controller.v	/^	output wire 					sclk_out, 		\/\/ serial clock input (max = 50MHz)$/;"	p
wire	dac_instr_queue.v	/^	input wire								rd_ack_in,			\/\/ read acknowledge causes next data word to be presented (if one exists)$/;"	p
wire	dac_instr_queue.v	/^	input wire [N_CHAN-1:0]				data_valid_in,		\/\/ data valid signal$/;"	p
wire	dac_instr_queue.v	/^	input wire [W_DATA*N_CHAN-1:0]	data_packed_in,	\/\/ input channels packed on a single bus$/;"	p
wire	dac_instr_queue.v	/^	output wire								data_valid_out		\/\/ output data valid signal$/;"	p
wire	dac_instr_queue.v	/^	output wire	[W_CHS-1:0]				chan_out,			\/\/ dac channel associated with output data$/;"	p
wire	dac_instr_queue.v	/^	output wire [W_DATA-1:0]			data_out,			\/\/ output data$/;"	p
wire	dac_test.v	/^	 input wire				clk1,$/;"	p
wire	dac_test.v	/^	 input wire[15:0]		FP_CHAN,$/;"	p
wire	dac_test.v	/^	 input wire[15:0]		FP_DVAL,$/;"	p
wire	dac_test.v	/^	 input wire[15:0]		FP_REF_SET,$/;"	p
wire	dac_test.v	/^	 input wire[15:0]		FP_TRIG,$/;"	p
wire	dac_test.v	/^	 output wire[2:0]		cur_state_db$/;"	p
wire	dac_test.v	/^    output wire 			DIN, \/\/ serial data input$/;"	p
wire	dac_test.v	/^    output wire 			SCLK, \/\/ serial clock input (max = 50MHz)$/;"	p
wire	dac_test.v	/^    output wire 			nCLR, \/\/ asynchronous clear$/;"	p
wire	dac_test.v	/^    output wire 			nLDAC, \/\/ Load DACs$/;"	p
wire	dac_test.v	/^    output wire 			nSYNC, \/\/ enables input shift register to get data$/;"	p
wire	dds_controller.v	/^	input wire				amp_dv_in, 			\/\/ amplitude data valid signal$/;"	p
wire	dds_controller.v	/^	input wire				clk_in,				\/\/ system clock$/;"	p
wire	dds_controller.v	/^	input wire				freq_dv_in,			\/\/ frequency data valid signal$/;"	p
wire	dds_controller.v	/^	input wire				phase_dv_in,		\/\/ phase data valid signal$/;"	p
wire	dds_controller.v	/^	input wire				reset_in, 			\/\/ system reset$/;"	p
wire	dds_controller.v	/^	input wire	[13:0]	phase_in,			\/\/ phase data$/;"	p
wire	dds_controller.v	/^	input wire	[47:0]	freq_in,				\/\/ frequency data$/;"	p
wire	dds_controller.v	/^	input wire	[9:0]		amp_in,				\/\/ amplitude data$/;"	p
wire	dds_controller.v	/^	output wire				csb_out,				\/\/ chip select signal to dds$/;"	p
wire	dds_controller.v	/^	output wire				dds_done_out 		\/\/ pulsed to indicate dds has finished updating$/;"	p
wire	dds_controller.v	/^	output wire				io_update_out,		\/\/ io update signal to dds$/;"	p
wire	dds_controller.v	/^	output wire				reset_out,			\/\/ reset signal to dds$/;"	p
wire	dds_controller.v	/^	output wire				sclk_out,			\/\/ serial clock signal to dds$/;"	p
wire	dds_controller.v	/^	output wire				sdio_out,			\/\/ serial data line to dds$/;"	p
wire	frontpanel_interface.v	/^    inout wire                  hi_aa,$/;"	p
wire	frontpanel_interface.v	/^    inout wire  [15:0]          hi_inout,$/;"	p
wire	frontpanel_interface.v	/^    input wire                  adc_clk,$/;"	p
wire	frontpanel_interface.v	/^    input wire                  log_dv,$/;"	p
wire	frontpanel_interface.v	/^    input wire                  sys_clk,$/;"	p
wire	frontpanel_interface.v	/^    input wire  [7:0]           hi_in,$/;"	p
wire	frontpanel_interface.v	/^    input wire  [W_LCHAN-1:0]   log_chan,$/;"	p
wire	frontpanel_interface.v	/^    input wire  [W_LDATA-1:0]   log_data,$/;"	p
wire	frontpanel_interface.v	/^    output wire                 adc_cstart,$/;"	p
wire	frontpanel_interface.v	/^    output wire                 dac_ref_set;$/;"	p
wire	frontpanel_interface.v	/^    output wire                 hi_muxsel,$/;"	p
wire	frontpanel_interface.v	/^    output wire                 i2c_scl,$/;"	p
wire	frontpanel_interface.v	/^    output wire                 i2c_sda,$/;"	p
wire	frontpanel_interface.v	/^    output wire                 sys_rst,$/;"	p
wire	frontpanel_interface.v	/^    output wire                 wr_en,$/;"	p
wire	frontpanel_interface.v	/^    output wire [1:0]           hi_out,$/;"	p
wire	frontpanel_interface.v	/^    output wire [W_EP*2-1:0]    opf_inject$/;"	p
wire	frontpanel_interface.v	/^    output wire [W_EP*4-1:0]    wr_data,$/;"	p
wire	frontpanel_interface.v	/^    output wire [W_EP-1:0]      wr_addr,$/;"	p
wire	frontpanel_interface.v	/^    output wire [W_EP-1:0]      wr_chan,$/;"	p
wire	frontpanel_interface.v	/^wire [16:0] ok2,$/;"	n
wire	instr_dispatch.v	/^    input wire [W_DATA-1:0] data_in,$/;"	p
wire	instr_dispatch.v	/^    input wire [W_SRC-1:0] src_in,$/;"	p
wire	instr_dispatch.v	/^    input wire [W_WR_ADDR-1:0] wr_addr,$/;"	p
wire	instr_dispatch.v	/^    input wire [W_WR_CHAN-1:0] wr_chan,$/;"	p
wire	instr_dispatch.v	/^    input wire [W_WR_DATA-1:0] wr_data,$/;"	p
wire	instr_dispatch.v	/^    input wire dv_in,$/;"	p
wire	instr_dispatch.v	/^    input wire wr_en,$/;"	p
wire	instr_dispatch.v	/^    output wire [W_CHAN-1:0] chan_out,$/;"	p
wire	instr_dispatch.v	/^    output wire [W_DATA-1:0] data_out,$/;"	p
wire	instr_dispatch.v	/^    output wire dv_out,$/;"	p
wire	mux_n_chan.v	/^	input wire							enable_in,			\/\/ enable signal$/;"	p
wire	mux_n_chan.v	/^	output wire[W_CHAN-1:0]			data_out				\/\/ data out bus$/;"	p
wire	output_filter.v	/^    input wire [W_CHAN-1:0] chan_in,$/;"	p
wire	output_filter.v	/^    input wire [W_WR_ADDR-1:0] wr_addr,$/;"	p
wire	output_filter.v	/^    input wire [W_WR_CHAN-1:0] wr_chan,$/;"	p
wire	output_filter.v	/^    input wire [W_WR_DATA-1:0] wr_data,$/;"	p
wire	output_filter.v	/^    input wire clk_in,$/;"	p
wire	output_filter.v	/^    input wire dv_in,$/;"	p
wire	output_filter.v	/^    input wire rst_in,$/;"	p
wire	output_filter.v	/^    input wire signed [W_DATA-1:0] data_in,$/;"	p
wire	output_filter.v	/^    input wire wr_en,$/;"	p
wire	output_filter.v	/^    output wire [W_CHAN-1:0] chan_out,$/;"	p
wire	output_filter.v	/^    output wire dv_out,$/;"	p
wire	output_filter.v	/^    output wire signed [W_DATA-1:0] data_out$/;"	p
wire	output_preprocessor.v	/^	input wire								data_valid_in,		\/\/ data valid signal$/;"	p
wire	output_preprocessor.v	/^	input wire								lock_en_in,			\/\/ lock enable signal, opp outputs constant value if lock disabled$/;"	p
wire	output_preprocessor.v	/^	input wire 				[W_EP-1:0]	right_shift_in,	\/\/ output right shift$/;"	p
wire	output_preprocessor.v	/^	input wire signed		[W_IN-1:0]	pid_sum_in,			\/\/ pid sum$/;"	p
wire	output_preprocessor.v	/^	input wire signed		[W_MLT-1:0]	multiplier_in,		\/\/ output multiplication factor$/;"	p
wire	output_preprocessor.v	/^	input wire signed		[W_OUT-1:0]	output_init_in,	\/\/ initial output value$/;"	p
wire	output_preprocessor.v	/^	input wire signed		[W_OUT-1:0]	output_max_in,		\/\/ output lower bound$/;"	p
wire	output_preprocessor.v	/^	input wire signed		[W_OUT-1:0]	output_min_in,		\/\/ output upper bound$/;"	p
wire	output_preprocessor.v	/^	output wire								data_valid_out		\/\/ output data valid signal$/;"	p
wire	output_preprocessor.v	/^	output wire	signed	[W_OUT-1:0]	data_out,			\/\/ output data$/;"	p
wire	output_preprocessor_new.v	/^	input wire								data_valid_in,		\/\/ data valid signal$/;"	p
wire	output_preprocessor_new.v	/^	input wire								lock_en_in,			\/\/ lock enable signal, opp outputs constant value if lock disables$/;"	p
wire	output_preprocessor_new.v	/^	input wire								update_en_in,		\/\/ module becomes sensitive to update signal when asserted$/;"	p
wire	output_preprocessor_new.v	/^	input wire								update_in,			\/\/ pulse triggers update of module frontpanel parameters$/;"	p
wire	output_preprocessor_new.v	/^	input wire 				[7:0]       multiplier_in,		\/\/ output multiplication factor$/;"	p
wire	output_preprocessor_new.v	/^	input wire signed		[W_IN-1:0]	data_in,				\/\/ input data bus$/;"	p
wire	output_preprocessor_new.v	/^	input wire signed		[W_OUT-1:0]	output_init_in,	\/\/ initial output value$/;"	p
wire	output_preprocessor_new.v	/^	input wire signed		[W_OUT-1:0]	output_max_in,		\/\/ output lower bound$/;"	p
wire	output_preprocessor_new.v	/^	input wire signed		[W_OUT-1:0]	output_min_in,		\/\/ output upper bound$/;"	p
wire	output_preprocessor_new.v	/^	output wire								data_valid_out		\/\/ output data valid signal$/;"	p
wire	output_preprocessor_new.v	/^	output wire	signed	[W_OUT-1:0]	data_out,			\/\/ output data$/;"	p
wire	oversample_filter.v	/^    input wire [W_CHAN-1:0] chan_in,$/;"	p
wire	oversample_filter.v	/^    input wire [W_WR_ADDR-1:0] wr_addr,$/;"	p
wire	oversample_filter.v	/^    input wire [W_WR_CHAN-1:0] wr_chan,$/;"	p
wire	oversample_filter.v	/^    input wire [W_WR_DATA-1:0] wr_data,$/;"	p
wire	oversample_filter.v	/^    input wire dv_in,$/;"	p
wire	oversample_filter.v	/^    input wire signed [W_DATA-1:0] data_in,$/;"	p
wire	oversample_filter.v	/^    input wire wr_en,$/;"	p
wire	oversample_filter.v	/^    output wire [W_CHAN-1:0] chan_out,$/;"	p
wire	oversample_filter.v	/^    output wire dv_out,$/;"	p
wire	oversample_filter.v	/^    output wire signed [W_DATA-1:0] data_out$/;"	p
wire	pid_controller.v	/^    inout wire                  hi_aa,$/;"	p
wire	pid_controller.v	/^    inout wire  [15:0]          hi_inout,$/;"	p
wire	pid_controller.v	/^    input wire                  adc_busy_in,$/;"	p
wire	pid_controller.v	/^    input wire                  adc_clk_in,$/;"	p
wire	pid_controller.v	/^    input wire                  adc_data_a_in,$/;"	p
wire	pid_controller.v	/^    input wire                  adc_data_b_in,$/;"	p
wire	pid_controller.v	/^    input wire                  sys_clk_in,$/;"	p
wire	pid_controller.v	/^    input wire  [7:0]           hi_in,$/;"	p
wire	pid_controller.v	/^    output wire                 adc_convst_out,$/;"	p
wire	pid_controller.v	/^    output wire                 adc_n_cs_out,$/;"	p
wire	pid_controller.v	/^    output wire                 adc_reset_out,$/;"	p
wire	pid_controller.v	/^    output wire                 adc_sclk_out,$/;"	p
wire	pid_controller.v	/^    output wire                 dac_din_out,$/;"	p
wire	pid_controller.v	/^    output wire                 dac_nclr_out,$/;"	p
wire	pid_controller.v	/^    output wire                 dac_nldac_out,$/;"	p
wire	pid_controller.v	/^    output wire                 dac_nsync_out,$/;"	p
wire	pid_controller.v	/^    output wire                 dac_sclk_out,$/;"	p
wire	pid_controller.v	/^    output wire                 hi_muxsel$/;"	p
wire	pid_controller.v	/^    output wire                 i2c_scl,$/;"	p
wire	pid_controller.v	/^    output wire                 i2c_sda,$/;"	p
wire	pid_controller.v	/^    output wire                 obuf_en_out = 1'b0, \/\/ active low$/;"	p
wire	pid_controller.v	/^    output wire [1:0]           hi_out,$/;"	p
wire	pid_controller.v	/^    output wire [N_DDS-1:0]     dds_csb_out,$/;"	p
wire	pid_controller.v	/^    output wire [N_DDS-1:0]     dds_io_update_out,$/;"	p
wire	pid_controller.v	/^    output wire [N_DDS-1:0]     dds_reset_out,$/;"	p
wire	pid_controller.v	/^    output wire [N_DDS-1:0]     dds_sclk_out,$/;"	p
wire	pid_controller.v	/^    output wire [N_DDS-1:0]     dds_sdio_out,$/;"	p
wire	pid_controller.v	/^    output wire [W_ADC_OS-1:0]  adc_os_out,$/;"	p
wire	pid_core.v	/^	input wire									clk_in,			\/\/ system clock$/;"	p
wire	pid_core.v	/^	input wire									data_valid_in,	\/\/ input data valid signal$/;"	p
wire	pid_core.v	/^	input wire									lock_en_in,		\/\/ lock enable$/;"	p
wire	pid_core.v	/^	input wire									reset_in,		\/\/ system reset$/;"	p
wire	pid_core.v	/^	input wire signed		[W_EP-1:0]		setpoint_in,	\/\/ lock setpoint$/;"	p
wire	pid_core.v	/^	input wire signed 	[W_EP-1:0]		d_coef_in,		\/\/ derivative coefficient$/;"	p
wire	pid_core.v	/^	input wire signed 	[W_EP-1:0]		i_coef_in,		\/\/ integral coefficient$/;"	p
wire	pid_core.v	/^	input wire signed 	[W_EP-1:0]		p_coef_in,		\/\/ proportional coefficient$/;"	p
wire	pid_core.v	/^	input wire signed 	[W_IN-1:0]		data_in, 		\/\/ unsigned input data$/;"	p
wire	pid_core.v	/^	output wire									data_valid_out	\/\/ output data valid signal$/;"	p
wire	pid_core.v	/^	output wire signed	[W_OUT-1:0]		data_out,		\/\/ pid filter output$/;"	p
wire	pid_filter.v	/^    input wire [W_CHAN-1:0] chan_in,$/;"	p
wire	pid_filter.v	/^    input wire [W_WR_ADDR-1:0] wr_addr,$/;"	p
wire	pid_filter.v	/^    input wire [W_WR_CHAN-1:0] wr_chan,$/;"	p
wire	pid_filter.v	/^    input wire [W_WR_DATA-1:0] wr_data,$/;"	p
wire	pid_filter.v	/^    input wire dv_in,$/;"	p
wire	pid_filter.v	/^    input wire signed [W_DIN-1:0] data_in,$/;"	p
wire	pid_filter.v	/^    input wire wr_en,$/;"	p
wire	pid_filter.v	/^    output wire [W_CHAN-1:0] chan_out,$/;"	p
wire	pid_filter.v	/^    output wire dv_out,$/;"	p
wire	pid_filter.v	/^    output wire signed [W_DIN-1:0] data_out$/;"	p
wire	pid_pipeline.v	/^    input wire [W_SRC-1:0] src_in,$/;"	p
wire	pid_pipeline.v	/^    input wire [W_WR_ADDR-1:0] wr_addr,$/;"	p
wire	pid_pipeline.v	/^    input wire [W_WR_CHAN-1:0] wr_chan,$/;"	p
wire	pid_pipeline.v	/^    input wire [W_WR_DATA-1:0] wr_data,$/;"	p
wire	pid_pipeline.v	/^    input wire clk_in,$/;"	p
wire	pid_pipeline.v	/^    input wire dv_in,$/;"	p
wire	pid_pipeline.v	/^    input wire rst_in,$/;"	p
wire	pid_pipeline.v	/^    input wire signed [W_DIN-1:0] data_in,$/;"	p
wire	pid_pipeline.v	/^    input wire wr_en,$/;"	p
wire	pid_pipeline.v	/^    output wire [log2(N_CHAN)-1:0] chan_out,$/;"	p
wire	pid_pipeline.v	/^    output wire dv_out,$/;"	p
wire	pid_pipeline.v	/^    output wire signed [W_DOUT-1:0] data_out$/;"	p
wire	pipe_tx_fifo.v	/^	input wire										pipe_read_in,$/;"	p
wire	pipe_tx_fifo.v	/^	input wire										reset_in,$/;"	p
wire	pipe_tx_fifo.v	/^	input wire										sys_clk_in,$/;"	p
wire	pipe_tx_fifo.v	/^	input wire										ti_clk_in,$/;"	p
wire	pipe_tx_fifo.v	/^	input wire						 				data_valid_in,$/;"	p
wire	pipe_tx_fifo.v	/^	input wire 				[15:0] 				data_in,$/;"	p
wire	pipe_tx_fifo.v	/^	output wire				[15:0]				data_out$/;"	p
wr_addr	pid_controller.v	/^wire [W_EP-1:0] wr_addr;$/;"	n
wr_chan	pid_controller.v	/^wire [W_EP-1:0] wr_chan;$/;"	n
wr_data	pid_controller.v	/^wire [W_EP*3-1:0] wr_data;$/;"	n
wr_data0	frontpanel_interface.v	/^wire [W_EP-1:0] wr_data3, wr_data2, wr_data1, wr_data0;$/;"	n
wr_data1	frontpanel_interface.v	/^wire [W_EP-1:0] wr_data3, wr_data2, wr_data1, wr_data0;$/;"	n
wr_data2	frontpanel_interface.v	/^wire [W_EP-1:0] wr_data3, wr_data2, wr_data1, wr_data0;$/;"	n
wr_data3	frontpanel_interface.v	/^wire [W_EP-1:0] wr_data3, wr_data2, wr_data1, wr_data0;$/;"	n
wr_en	pid_controller.v	/^wire wr_en;$/;"	n
