!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
::fifo_16_xmdf::xmdfApplyParams	ip_core/fifo_16_xmdf.tcl	/^proc ::fifo_16_xmdf::xmdfApplyParams { instance } {$/;"	p
::fifo_16_xmdf::xmdfInit	ip_core/fifo_16_xmdf.tcl	/^proc ::fifo_16_xmdf::xmdfInit { instance } {$/;"	p
::fifo_19_xmdf::xmdfApplyParams	ip_core/fifo_19_xmdf.tcl	/^proc ::fifo_19_xmdf::xmdfApplyParams { instance } {$/;"	p
::fifo_19_xmdf::xmdfInit	ip_core/fifo_19_xmdf.tcl	/^proc ::fifo_19_xmdf::xmdfInit { instance } {$/;"	p
ActivateTriggerIn	ok_sim/okHostCalls.v	/^task ActivateTriggerIn ($/;"	t
BlockDelayStates	ok_sim/okHost.v	/^integer     BlockDelayStates;$/;"	r
BlockDelayStates	test_fixtures/pid_controller_tf.v	/^	parameter BlockDelayStates = 5;   \/\/ REQUIRED: # of clocks between blocks of pipe data$/;"	c
BlockDelayStates	test_fixtures/tle_adc_controller_tf.v	/^	parameter BlockDelayStates = 5;   \/\/ REQUIRED: # of clocks between blocks of pipe data$/;"	c
CActivateTriggerIn	ok_sim/okHost.v	/^`define CActivateTriggerIn    5'b00100$/;"	c
CGetWireOutValue	ok_sim/okHost.v	/^`define CGetWireOutValue      5'b00010$/;"	c
CIsTriggered	ok_sim/okHost.v	/^`define CIsTriggered          5'b00010$/;"	c
COMP_LATENCY	output_preprocessor.v	/^	parameter COMP_LATENCY	= 3								\/\/ computation latency in clock cycles$/;"	c
COMP_LATENCY	pid_core.v	/^	parameter COMP_LATENCY	= 1							\/\/ pid computation latency in clock cycles$/;"	c
CReadFromBTPipeOut	ok_sim/okHost.v	/^`define CReadFromBTPipeOut    5'b00010$/;"	c
CReadFromPipeOut	ok_sim/okHost.v	/^`define CReadFromPipeOut      5'b00010$/;"	c
CReset	ok_sim/okHost.v	/^`define CReset                5'b00001$/;"	c
CSetWireIns	ok_sim/okHost.v	/^`define CSetWireIns           5'b00100$/;"	c
CUpdateTriggerOuts	ok_sim/okHost.v	/^`define CUpdateTriggerOuts    5'b10000$/;"	c
CUpdateWireIns	ok_sim/okHost.v	/^`define CUpdateWireIns        5'b01000$/;"	c
CUpdateWireOuts	ok_sim/okHost.v	/^`define CUpdateWireOuts       5'b01000$/;"	c
CWriteToBTPipeIn	ok_sim/okHost.v	/^`define CWriteToBTPipeIn      5'b00100$/;"	c
CWriteToPipeIn	ok_sim/okHost.v	/^`define CWriteToPipeIn        5'b00100$/;"	c
C_DATA_WIDTH	ip_core/fifo_16/simulation/fifo_16_dgen.vhd	/^  CONSTANT C_DATA_WIDTH : INTEGER := if_then_else(C_DIN_WIDTH > C_DOUT_WIDTH,C_DIN_WIDTH,C_DOUT_WIDTH);$/;"	c
C_DATA_WIDTH	ip_core/fifo_16/simulation/fifo_16_dverif.vhd	/^ CONSTANT C_DATA_WIDTH    : INTEGER := if_then_else(C_DIN_WIDTH > C_DOUT_WIDTH,C_DIN_WIDTH,C_DOUT_WIDTH);$/;"	c
C_DATA_WIDTH	ip_core/fifo_16/simulation/fifo_16_pctrl.vhd	/^ CONSTANT C_DATA_WIDTH   : INTEGER := if_then_else(C_DIN_WIDTH > C_DOUT_WIDTH,C_DIN_WIDTH,C_DOUT_WIDTH);$/;"	c
C_DATA_WIDTH	ip_core/fifo_19/simulation/fifo_19_dgen.vhd	/^  CONSTANT C_DATA_WIDTH : INTEGER := if_then_else(C_DIN_WIDTH > C_DOUT_WIDTH,C_DIN_WIDTH,C_DOUT_WIDTH);$/;"	c
C_DATA_WIDTH	ip_core/fifo_19/simulation/fifo_19_dverif.vhd	/^ CONSTANT C_DATA_WIDTH    : INTEGER := if_then_else(C_DIN_WIDTH > C_DOUT_WIDTH,C_DIN_WIDTH,C_DOUT_WIDTH);$/;"	c
C_DATA_WIDTH	ip_core/fifo_19/simulation/fifo_19_pctrl.vhd	/^ CONSTANT C_DATA_WIDTH   : INTEGER := if_then_else(C_DIN_WIDTH > C_DOUT_WIDTH,C_DIN_WIDTH,C_DOUT_WIDTH);$/;"	c
DActivateTriggerIn	ok_sim/okHost.v	/^`define DActivateTriggerIn    4'h6$/;"	c
DActivateTriggerIn	ok_sim/okHostCalls.v	/^`define DActivateTriggerIn    4'h6$/;"	c
DGetWireOutValue	ok_sim/okHost.v	/^`define DGetWireOutValue      4'h4$/;"	c
DIsTriggered	ok_sim/okHost.v	/^`define DIsTriggered          4'h8$/;"	c
DNOP	ok_sim/okHost.v	/^`define DNOP                  4'h0$/;"	c
DNOP	ok_sim/okHostCalls.v	/^`define DNOP                  4'h0$/;"	c
DReadFromBlockPipeOut	ok_sim/okHost.v	/^`define DReadFromBlockPipeOut 4'hc$/;"	c
DReadFromBlockPipeOut	ok_sim/okHostCalls.v	/^`define DReadFromBlockPipeOut 4'hc$/;"	c
DReadFromPipeOut	ok_sim/okHost.v	/^`define DReadFromPipeOut      4'ha$/;"	c
DReadFromPipeOut	ok_sim/okHostCalls.v	/^`define DReadFromPipeOut      4'ha$/;"	c
DReset	ok_sim/okHost.v	/^`define DReset                4'h1$/;"	c
DReset	ok_sim/okHostCalls.v	/^`define DReset                4'h1$/;"	c
DSetWireIns	ok_sim/okHost.v	/^`define DSetWireIns           4'h2$/;"	c
DUpdateTriggerOuts	ok_sim/okHost.v	/^`define DUpdateTriggerOuts    4'h7$/;"	c
DUpdateTriggerOuts	ok_sim/okHostCalls.v	/^`define DUpdateTriggerOuts    4'h7$/;"	c
DUpdateWireIns	ok_sim/okHost.v	/^`define DUpdateWireIns        4'h3$/;"	c
DUpdateWireIns	ok_sim/okHostCalls.v	/^`define DUpdateWireIns        4'h3$/;"	c
DUpdateWireOuts	ok_sim/okHost.v	/^`define DUpdateWireOuts       4'h5$/;"	c
DUpdateWireOuts	ok_sim/okHostCalls.v	/^`define DUpdateWireOuts       4'h5$/;"	c
DWriteToBlockPipeIn	ok_sim/okHost.v	/^`define DWriteToBlockPipeIn   4'hb$/;"	c
DWriteToBlockPipeIn	ok_sim/okHostCalls.v	/^`define DWriteToBlockPipeIn   4'hb$/;"	c
DWriteToPipeIn	ok_sim/okHost.v	/^`define DWriteToPipeIn        4'h9$/;"	c
DWriteToPipeIn	ok_sim/okHostCalls.v	/^`define DWriteToPipeIn        4'h9$/;"	c
D_WIDTH_DIFF	ip_core/fifo_16/simulation/fifo_16_pctrl.vhd	/^ CONSTANT D_WIDTH_DIFF   :   INTEGER := log2roundup(C_DOUT_WIDTH\/C_DIN_WIDTH);$/;"	c
D_WIDTH_DIFF	ip_core/fifo_19/simulation/fifo_19_pctrl.vhd	/^ CONSTANT D_WIDTH_DIFF   :   INTEGER := log2roundup(C_DOUT_WIDTH\/C_DIN_WIDTH);$/;"	c
EXTRA_WIDTH	ip_core/fifo_16/simulation/fifo_16_dverif.vhd	/^ CONSTANT EXTRA_WIDTH     : INTEGER := if_then_else(C_CH_TYPE = 2,1,0);$/;"	c
EXTRA_WIDTH	ip_core/fifo_19/simulation/fifo_19_dverif.vhd	/^ CONSTANT EXTRA_WIDTH     : INTEGER := if_then_else(C_CH_TYPE = 2,1,0);$/;"	c
FrontPanelReset	ok_sim/okHostCalls.v	/^task FrontPanelReset ();$/;"	t
GSR	ok_sim/glbl.v	/^    wire GSR;$/;"	n
GSR_int	ok_sim/glbl.v	/^    reg GSR_int;$/;"	r
GTS	ok_sim/glbl.v	/^    wire GTS;$/;"	n
GTS_int	ok_sim/glbl.v	/^    reg GTS_int;$/;"	r
GetWireOutValue	ok_sim/okHostCalls.v	/^function [15:0] GetWireOutValue ($/;"	f
IsTriggered	ok_sim/okHostCalls.v	/^function IsTriggered ($/;"	f
JTAG_CAPTURE_GLBL	ok_sim/glbl.v	/^    reg JTAG_CAPTURE_GLBL;$/;"	r
JTAG_RESET_GLBL	ok_sim/glbl.v	/^    reg JTAG_RESET_GLBL;$/;"	r
JTAG_SEL1_GLBL	ok_sim/glbl.v	/^    reg JTAG_SEL1_GLBL = 0;$/;"	r
JTAG_SEL2_GLBL	ok_sim/glbl.v	/^    reg JTAG_SEL2_GLBL = 0 ;$/;"	r
JTAG_SEL3_GLBL	ok_sim/glbl.v	/^    reg JTAG_SEL3_GLBL = 0;$/;"	r
JTAG_SEL4_GLBL	ok_sim/glbl.v	/^    reg JTAG_SEL4_GLBL = 0;$/;"	r
JTAG_SHIFT_GLBL	ok_sim/glbl.v	/^    reg JTAG_SHIFT_GLBL;$/;"	r
JTAG_TCK_GLBL	ok_sim/glbl.v	/^    wire JTAG_TCK_GLBL;$/;"	n
JTAG_TDI_GLBL	ok_sim/glbl.v	/^    wire JTAG_TDI_GLBL;$/;"	n
JTAG_TDO_GLBL	ok_sim/glbl.v	/^    wire JTAG_TDO_GLBL;$/;"	n
JTAG_TMS_GLBL	ok_sim/glbl.v	/^    wire JTAG_TMS_GLBL;$/;"	n
JTAG_TRST_GLBL	ok_sim/glbl.v	/^    wire JTAG_TRST_GLBL;$/;"	n
JTAG_UPDATE_GLBL	ok_sim/glbl.v	/^    reg JTAG_UPDATE_GLBL;$/;"	r
JTAG_USER_TDO1_GLBL	ok_sim/glbl.v	/^    reg JTAG_USER_TDO1_GLBL = 1'bz;$/;"	r
JTAG_USER_TDO2_GLBL	ok_sim/glbl.v	/^    reg JTAG_USER_TDO2_GLBL = 1'bz;$/;"	r
JTAG_USER_TDO3_GLBL	ok_sim/glbl.v	/^    reg JTAG_USER_TDO3_GLBL = 1'bz;$/;"	r
JTAG_USER_TDO4_GLBL	ok_sim/glbl.v	/^    reg JTAG_USER_TDO4_GLBL = 1'bz;$/;"	r
LOOP_COUNT	ip_core/fifo_16/simulation/fifo_16_dgen.vhd	/^  CONSTANT LOOP_COUNT   : INTEGER := divroundup(C_DATA_WIDTH,8);$/;"	c
LOOP_COUNT	ip_core/fifo_16/simulation/fifo_16_dverif.vhd	/^ CONSTANT LOOP_COUNT      : INTEGER := divroundup(C_DATA_WIDTH+EXTRA_WIDTH,8);$/;"	c
LOOP_COUNT	ip_core/fifo_16/simulation/fifo_16_pctrl.vhd	/^ CONSTANT LOOP_COUNT     : INTEGER := divroundup(C_DATA_WIDTH,8);$/;"	c
LOOP_COUNT	ip_core/fifo_19/simulation/fifo_19_dgen.vhd	/^  CONSTANT LOOP_COUNT   : INTEGER := divroundup(C_DATA_WIDTH,8);$/;"	c
LOOP_COUNT	ip_core/fifo_19/simulation/fifo_19_dverif.vhd	/^ CONSTANT LOOP_COUNT      : INTEGER := divroundup(C_DATA_WIDTH+EXTRA_WIDTH,8);$/;"	c
LOOP_COUNT	ip_core/fifo_19/simulation/fifo_19_pctrl.vhd	/^ CONSTANT LOOP_COUNT     : INTEGER := divroundup(C_DATA_WIDTH,8);$/;"	c
MIN_T_CYCLE	adc_controller.v	/^	parameter MIN_T_CYCLE	= 85						\/\/ minimum cycle time in number of adc clock cycles$/;"	c
N_ADC	frontpanel_interface.v	/^	parameter N_ADC		= 6,									\/\/ number of active adc channels$/;"	c
N_ADC	pid_controller.v	/^	parameter N_ADC			= 8,	\/\/ number of adc channels$/;"	c
N_CHAN	dac_controller.v	/^	parameter N_CHAN	= 8							\/\/ number of channels$/;"	c
N_CHAN	dac_instr_queue.v	/^	parameter N_CHAN		= 8		\/\/ number of DAC channels$/;"	c
N_DDS	pid_controller.v	/^	parameter N_DDS			= 0,	\/\/ number of dds channels$/;"	c
N_IN	mux_n_chan.v	/^	parameter N_IN 	= 8									\/\/ number of input channels$/;"	c
N_IN	router.v	/^	parameter N_IN		= 8,										\/\/ number of input channels$/;"	c
OK2X_LEN	pipe_tx_fifo.v	/^	parameter OK2X_LEN	= 17*(N_ADC+1),$/;"	c
OK_DATAOUT_END	ok_sim/mappings.v	/^parameter OK_DATAOUT_END   = 16;$/;"	c
OK_DATAOUT_START	ok_sim/mappings.v	/^parameter OK_DATAOUT_START = 1;$/;"	c
OK_READY	ok_sim/mappings.v	/^parameter OK_READY         = 0;$/;"	c
OK_TI_ADDR_END	ok_sim/mappings.v	/^parameter OK_TI_ADDR_END   = 7;$/;"	c
OK_TI_ADDR_START	ok_sim/mappings.v	/^parameter OK_TI_ADDR_START = 0;$/;"	c
OK_TI_BLOCKSTROBE	ok_sim/mappings.v	/^parameter OK_TI_BLOCKSTROBE   = 8;$/;"	c
OK_TI_CLK	ok_sim/mappings.v	/^parameter OK_TI_CLK        = 27;$/;"	c
OK_TI_DATAIN_END	ok_sim/mappings.v	/^parameter OK_TI_DATAIN_END    = 26;$/;"	c
OK_TI_DATAIN_START	ok_sim/mappings.v	/^parameter OK_TI_DATAIN_START  = 11;$/;"	c
OK_TI_READ	ok_sim/mappings.v	/^parameter OK_TI_READ       = 9;$/;"	c
OK_TI_RESET	ok_sim/mappings.v	/^parameter OK_TI_RESET      = 28;$/;"	c
OK_TI_TRIGUPDATE	ok_sim/mappings.v	/^parameter OK_TI_TRIGUPDATE    = 10;$/;"	c
OK_TI_WIREUPDATE	ok_sim/mappings.v	/^parameter OK_TI_WIREUPDATE    = 29;$/;"	c
OK_TI_WRITE	ok_sim/mappings.v	/^parameter OK_TI_WRITE      = 30;$/;"	c
PRLD	ok_sim/glbl.v	/^    wire PRLD;$/;"	n
PRLD_int	ok_sim/glbl.v	/^    reg PRLD_int;$/;"	r
PostReadyDelay	ok_sim/okHost.v	/^integer     PostReadyDelay;$/;"	r
PostReadyDelay	test_fixtures/pid_controller_tf.v	/^	parameter PostReadyDelay = 5;     \/\/ REQUIRED: # of clocks after ready is asserted and$/;"	c
PostReadyDelay	test_fixtures/tle_adc_controller_tf.v	/^	parameter PostReadyDelay = 5;     \/\/ REQUIRED: # of clocks after ready is asserted and$/;"	c
READ_LEN	pipe_tx_fifo.v	/^	parameter READ_LEN	= 1024,$/;"	c
ROC_WIDTH	ok_sim/glbl.v	/^    parameter ROC_WIDTH = 100000;$/;"	c
ReadFromBlockPipeOut	ok_sim/okHostCalls.v	/^task ReadFromBlockPipeOut ($/;"	t
ReadFromPipeOut	ok_sim/okHostCalls.v	/^task ReadFromPipeOut ($/;"	t
ReadyCheckDelay	ok_sim/okHost.v	/^integer     ReadyCheckDelay;$/;"	r
ReadyCheckDelay	test_fixtures/pid_controller_tf.v	/^	parameter ReadyCheckDelay = 5;    \/\/ REQUIRED: # of clocks before block transfer before$/;"	c
ReadyCheckDelay	test_fixtures/tle_adc_controller_tf.v	/^	parameter ReadyCheckDelay = 5;    \/\/ REQUIRED: # of clocks before block transfer before$/;"	c
SetWireInValue	ok_sim/okHostCalls.v	/^task SetWireInValue ($/;"	t
TDOUT_DELAY	ok_sim/parameters.v	/^parameter TDOUT_DELAY    = 0;$/;"	c
TOC_WIDTH	ok_sim/glbl.v	/^    parameter TOC_WIDTH = 0;$/;"	c
TTRIG_DELAY	ok_sim/parameters.v	/^parameter TTRIG_DELAY    = 0;$/;"	c
T_ADC_CYCLE	pid_controller.v	/^	parameter T_ADC_CYCLE	= 85	\/\/ adc conversion cycle time in number of adc clock cycles$/;"	c
Tep	ok_sim/parameters.v	/^parameter Tep  = 5;       \/\/100Mhz $/;"	c
Triggered	ok_sim/okHostCalls.v	/^reg   [15:0]   Triggered [0:31]; \/\/ 16x32 array storing IsTriggered values$/;"	r
Tti	ok_sim/parameters.v	/^parameter Tti  = 10.416;  \/\/48Mhz$/;"	c
UPDATE_LATENCY	dds_controller.v	/^parameter UPDATE_LATENCY	= 5;		\/\/ dds freq update latency in clock cycles (update latency = 60ns with a 1GHz sysclk)$/;"	c
UPDATE_TO_READOUT_CLOCKS	ok_sim/parameters.v	/^parameter UPDATE_TO_READOUT_CLOCKS = 15;    \/\/ Specifies the number if TI_CLK cycles between a trigger out update and readout.$/;"	c
UpdateTriggerOuts	ok_sim/okHostCalls.v	/^task UpdateTriggerOuts ();$/;"	t
UpdateWireIns	ok_sim/okHostCalls.v	/^task UpdateWireIns ();$/;"	t
UpdateWireOuts	ok_sim/okHostCalls.v	/^task UpdateWireOuts ();$/;"	t
W_ADC	frontpanel_interface.v	/^	parameter W_ADC		= 18,									\/\/ width of adc channels$/;"	c
W_CHAN	mux_n_chan.v	/^	parameter W_CHAN	= 16,									\/\/ width of input channels$/;"	c
W_CHAN	router.v	/^	parameter W_CHAN	= 16,										\/\/ width of input channels$/;"	c
W_DAC_DATA	pid_controller.v	/^	parameter W_DAC_DATA		= 16,	\/\/ width of dac data input$/;"	c
W_DAC_INST	pid_controller.v	/^	parameter W_DAC_INST		= 32, \/\/ width of dac update instruction$/;"	c
W_DATA	clk_sync.v	/^	parameter W_DATA	= 18,							\/\/ width of data bus$/;"	c
W_DATA	dac_controller.v	/^	parameter W_DATA	= 16,							\/\/ width of data signal$/;"	c
W_DATA	dac_instr_queue.v	/^	parameter W_DATA		= 16,		\/\/ width of dac data signal$/;"	c
W_DDS_PHASE	pid_controller.v	/^	parameter W_DDS_PHASE	= 14,	\/\/ width of dds phase word$/;"	c
W_IN	output_preprocessor.v	/^	parameter W_IN				= 18,								\/\/ width of input data bus$/;"	c
W_IN	oversample_filter.v	/^	parameter W_IN		= 18,										\/\/ width of input data$/;"	c
W_IN	pid_core.v	/^	parameter W_IN				= 18,							\/\/ input data width$/;"	c
W_OSF	pid_controller.v	/^	parameter W_OSF			= 18, \/\/ width of oversample filter output$/;"	c
W_OSF_OSM	frontpanel_interface.v	/^	parameter W_OSF_OSM	= 6									\/\/ width of oversample ratio signal$/;"	c
W_OSM	oversample_filter.v	/^	parameter W_OSM	= 4										\/\/ width of oversample mode signal (max oversample ratio = 2^(2^W_OSM - 1))$/;"	c
W_OUT	adc_controller.v	/^	parameter W_OUT			= 18,						\/\/ width of adc data channels$/;"	c
WireIns	ok_sim/okHostCalls.v	/^reg   [15:0]   WireIns [0:31];   \/\/ 16x32 array storing WireIn values$/;"	r
WireOuts	ok_sim/okHostCalls.v	/^reg   [15:0]   WireOuts [0:31];  \/\/ 16x32 array storing WireOut values$/;"	r
WriteToBlockPipeIn	ok_sim/okHostCalls.v	/^task WriteToBlockPipeIn ($/;"	t
WriteToPipeIn	ok_sim/okHostCalls.v	/^task WriteToPipeIn ($/;"	t
adc_busy_db	test_fixtures/pid_controller_tf.v	/^	wire adc_busy_db;$/;"	n
adc_busy_db	test_fixtures/tle_adc_controller_tf.v	/^	wire adc_busy_db;$/;"	n
adc_busy_in	test_fixtures/pid_controller_tf.v	/^	reg adc_busy_in;$/;"	r
adc_busy_in	test_fixtures/tle_adc_controller_tf.v	/^	reg adc_busy_in;$/;"	r
adc_controller	adc_controller.v	/^module adc_controller #($/;"	m
adc_controller_tf	test_fixtures/adc_controller_tf.v	/^module adc_controller_tf;$/;"	m
adc_convst_db	test_fixtures/pid_controller_tf.v	/^	wire adc_convst_db;$/;"	n
adc_convst_db	test_fixtures/tle_adc_controller_tf.v	/^	wire adc_convst_db;$/;"	n
adc_convst_out	test_fixtures/pid_controller_tf.v	/^	wire adc_convst_out;$/;"	n
adc_convst_out	test_fixtures/tle_adc_controller_tf.v	/^	wire adc_convst_out;$/;"	n
adc_cstart	pid_controller.v	/^wire								adc_cstart;$/;"	n
adc_cstart_db	test_fixtures/pid_controller_tf.v	/^	wire adc_cstart_db;$/;"	n
adc_cstart_db	test_fixtures/tle_adc_controller_tf.v	/^	wire adc_cstart_db;$/;"	n
adc_cstart_ti	test_fixtures/pid_controller_tf.v	/^	parameter adc_cstart_ti				= 8'h53;$/;"	c
adc_cstart_ti	test_fixtures/tle_adc_controller_tf.v	/^	parameter adc_cstart_ti				= 8'h53;$/;"	c
adc_cstart_trig	frontpanel_interface.v	/^wire	[15:0] 		adc_cstart_trig;$/;"	n
adc_data	frontpanel_interface.v	/^reg	[W_ADC-1:0]	adc_data[0:N_ADC-1];$/;"	r
adc_data0_db	pid_controller.v	/^wire [17:0] adc_data0_db;$/;"	n
adc_data_a	pid_controller.v	/^wire	[W_ADC-1:0]				adc_data_a;$/;"	n
adc_data_a_db	test_fixtures/pid_controller_tf.v	/^	wire adc_data_a_db;$/;"	n
adc_data_a_db	test_fixtures/tle_adc_controller_tf.v	/^	wire adc_data_a_db;$/;"	n
adc_data_a_in	test_fixtures/pid_controller_tf.v	/^	wire adc_data_a_in;$/;"	n
adc_data_a_in	test_fixtures/tle_adc_controller_tf.v	/^	wire adc_data_a_in;$/;"	n
adc_data_a_vect_db	test_fixtures/pid_controller_tf.v	/^	wire [6:0] adc_data_a_vect_db;$/;"	n
adc_data_a_vect_db	test_fixtures/tle_adc_controller_tf.v	/^	wire [6:0] adc_data_a_vect_db;$/;"	n
adc_data_b	pid_controller.v	/^wire	[W_ADC-1:0]				adc_data_b;$/;"	n
adc_data_b_db	test_fixtures/pid_controller_tf.v	/^	wire adc_data_b_db;$/;"	n
adc_data_b_db	test_fixtures/tle_adc_controller_tf.v	/^	wire adc_data_b_db;$/;"	n
adc_data_b_in	test_fixtures/pid_controller_tf.v	/^	wire adc_data_b_in;$/;"	n
adc_data_b_in	test_fixtures/tle_adc_controller_tf.v	/^	wire adc_data_b_in;$/;"	n
adc_data_valid	pid_controller.v	/^wire	[N_ADC-1:0]				adc_data_valid;$/;"	n
adc_data_valid_db	test_fixtures/pid_controller_tf.v	/^	wire adc_data_valid_db;$/;"	n
adc_data_valid_db	test_fixtures/tle_adc_controller_tf.v	/^	wire adc_data_valid_db;$/;"	n
adc_n_cs_db	test_fixtures/pid_controller_tf.v	/^	wire adc_n_cs_db;$/;"	n
adc_n_cs_db	test_fixtures/tle_adc_controller_tf.v	/^	wire adc_n_cs_db;$/;"	n
adc_n_cs_out	test_fixtures/pid_controller_tf.v	/^	wire adc_n_cs_out;$/;"	n
adc_n_cs_out	test_fixtures/tle_adc_controller_tf.v	/^	wire adc_n_cs_out;$/;"	n
adc_os	pid_controller.v	/^wire	[2:0]						adc_os;$/;"	n
adc_os_db	test_fixtures/pid_controller_tf.v	/^	wire [2:0] adc_os_db;$/;"	n
adc_os_db	test_fixtures/tle_adc_controller_tf.v	/^	wire [2:0] adc_os_db;$/;"	n
adc_os_out	test_fixtures/pid_controller_tf.v	/^	wire [2:0] adc_os_out;$/;"	n
adc_os_out	test_fixtures/tle_adc_controller_tf.v	/^	wire [2:0] adc_os_out;$/;"	n
adc_os_owi	test_fixtures/pid_controller_tf.v	/^	parameter adc_os_owi					= 8'h01;$/;"	c
adc_os_owi	test_fixtures/tle_adc_controller_tf.v	/^	parameter adc_os_owi					= 8'h01;$/;"	c
adc_os_wire	frontpanel_interface.v	/^wire	[15:0] 		adc_os_wire;$/;"	n
adc_reset_db	test_fixtures/pid_controller_tf.v	/^	wire adc_reset_db;$/;"	n
adc_reset_db	test_fixtures/tle_adc_controller_tf.v	/^	wire adc_reset_db;$/;"	n
adc_reset_out	test_fixtures/pid_controller_tf.v	/^	wire adc_reset_out;$/;"	n
adc_reset_out	test_fixtures/tle_adc_controller_tf.v	/^	wire adc_reset_out;$/;"	n
adc_sclk_db	test_fixtures/pid_controller_tf.v	/^	wire adc_sclk_db;$/;"	n
adc_sclk_db	test_fixtures/tle_adc_controller_tf.v	/^	wire adc_sclk_db;$/;"	n
adc_sclk_out	test_fixtures/pid_controller_tf.v	/^	wire adc_sclk_out;$/;"	n
adc_sclk_out	test_fixtures/tle_adc_controller_tf.v	/^	wire adc_sclk_out;$/;"	n
address	dac_controller.v	/^reg	[3:0]	 address;$/;"	r
almost_full	ip_core/fifo_16.v	/^output almost_full;$/;"	p
amp	dds_controller.v	/^reg	[9:0]		amp;						\/\/ active amplitude value$/;"	r
amp_wr_instr	dds_controller.v	/^wire	[31:0] 	amp_wr_instr;			\/\/ amplitude write instruction $/;"	n
bin_from_oh	dac_instr_queue.v	/^function [W_CHS-1:0] bin_from_oh;$/;"	f
blockNum	ok_sim/okHost.v	/^integer     blockNum;$/;"	r
blockNum	ok_sim/okHostCalls.v	/^   integer           len, blockSize, blockNum, i, j, k;$/;"	r
blockSize	ok_sim/okHost.v	/^integer     blockSize;$/;"	r
blockSize	ok_sim/okHostCalls.v	/^   integer           len, blockSize, blockNum, i, j, k;$/;"	r
blockSize	ok_sim/okHostCalls.v	/^   integer           len, i, j, k, blockSize;$/;"	r
busy_in	test_fixtures/adc_controller_tf.v	/^	reg busy_in;$/;"	r
captrig	ok_sim/okTriggerOut.v	/^reg         captrig;$/;"	r
chan	test_fixtures/adc_controller_tf.v	/^	reg [W_DATA-1:0]	chan[0:N_CHAN-1];$/;"	r
chan	test_fixtures/pid_controller_tf.v	/^	reg [W_DATA-1:0]	chan[0:N_CHAN-1];$/;"	r
chan	test_fixtures/tle_adc_controller_tf.v	/^	reg [W_DATA-1:0]	chan[0:N_CHAN-1];$/;"	r
chan_lower	dac_instr_queue.v	/^wire [W_CHS-1:0] chan_upper, chan_lower;					\/\/ upper and lower channel signals$/;"	n
chan_upper	dac_instr_queue.v	/^wire [W_CHS-1:0] chan_upper, chan_lower;					\/\/ upper and lower channel signals$/;"	n
channel	mux_n_chan.v	/^wire	[W_CHAN-1:0]	channel	[0:N_IN-1];$/;"	n
clk	ip_core/fifo_19.v	/^input clk;$/;"	p
clk17_db	test_fixtures/pid_controller_tf.v	/^	wire clk17_db;$/;"	n
clk17_db	test_fixtures/tle_adc_controller_tf.v	/^	wire clk17_db;$/;"	n
clk17_in	test_fixtures/pid_controller_tf.v	/^	reg clk17_in;$/;"	r
clk17_in	test_fixtures/tle_adc_controller_tf.v	/^	reg clk17_in;$/;"	r
clk50_in	test_fixtures/pid_controller_tf.v	/^	reg clk50_in;$/;"	r
clk50_in	test_fixtures/tle_adc_controller_tf.v	/^	reg clk50_in;$/;"	r
clk_in	test_fixtures/adc_controller_tf.v	/^	reg clk_in;$/;"	r
clk_sync	clk_sync.v	/^module clk_sync #($/;"	m
control	dac_controller.v	/^wire	[3:0]	 control;$/;"	n
convst_out	test_fixtures/adc_controller_tf.v	/^	wire convst_out;$/;"	n
counter	dac_controller.v	/^reg	[7:0]		counter;$/;"	r
counter	dds_controller.v	/^reg	[31:0] 	counter; 				\/\/ intrastate counter$/;"	r
counter	output_preprocessor.v	/^reg			[7:0]			counter; 						\/\/ intrastate counter$/;"	r
counter	oversample_filter.v	/^reg	[15:0]	counter;$/;"	r
counter	pid_core.v	/^reg			[7:0] 		counter; 			\/\/ intrastate counter$/;"	r
cs_data_a	pid_controller.v	/^wire	[W_ADC-1:0]				cs_data_a;$/;"	n
cs_data_b	pid_controller.v	/^wire	[W_ADC-1:0]				cs_data_b;$/;"	n
cs_data_valid	pid_controller.v	/^wire	[N_ADC-1:0]				cs_data_valid;$/;"	n
cstart_in	test_fixtures/adc_controller_tf.v	/^	reg cstart_in;$/;"	r
cur_state	clk_sync.v	/^reg	[2:0] 				cur_state;	\/\/ state machine current state$/;"	r
cur_state	dac_controller.v	/^reg	[2:0]		cur_state;$/;"	r
cur_state	dds_controller.v	/^reg	[2:0] 	cur_state;				\/\/ current state$/;"	r
cur_state	output_preprocessor.v	/^reg			[2:0]			cur_state;						\/\/ current state$/;"	r
cur_state	oversample_filter.v	/^reg	[2:0]		cur_state;$/;"	r
cur_state	pid_core.v	/^reg			[2:0] 		cur_state;			\/\/ current state$/;"	r
cur_state	pipe_tx_fifo.v	/^reg	[2:0] 	cur_state;$/;"	r
cv_counter	adc_controller.v	/^reg	[7:0] 				cv_counter; 	\/\/ convert state machine counter$/;"	r
cv_cur_state	adc_controller.v	/^reg	[2:0] 				cv_cur_state;	\/\/ convert state machine current state$/;"	r
cv_next_state	adc_controller.v	/^reg	[2:0] 				cv_next_state;	\/\/ convert state machine next state$/;"	r
cycle_delay	oversample_filter.v	/^reg	[15:0]		cycle_delay;$/;"	r
dac_chan	pid_controller.v	/^wire	[2:0]						dac_chan;$/;"	n
dac_controller	dac_controller.v	/^module dac_controller #($/;"	m
dac_data	pid_controller.v	/^wire	[W_DAC_DATA-1:0]		dac_data;$/;"	n
dac_din_out	test_fixtures/pid_controller_tf.v	/^	wire dac_din_out;$/;"	n
dac_din_out	test_fixtures/tle_adc_controller_tf.v	/^	wire dac_din_out;$/;"	n
dac_done	pid_controller.v	/^wire								dac_done;$/;"	n
dac_instr_queue	dac_instr_queue.v	/^module dac_instr_queue #($/;"	m
dac_nclr_out	test_fixtures/pid_controller_tf.v	/^	wire dac_nclr_out;$/;"	n
dac_nclr_out	test_fixtures/tle_adc_controller_tf.v	/^	wire dac_nclr_out;$/;"	n
dac_nldac_out	test_fixtures/pid_controller_tf.v	/^	wire dac_nldac_out;$/;"	n
dac_nldac_out	test_fixtures/tle_adc_controller_tf.v	/^	wire dac_nldac_out;$/;"	n
dac_nsync_out	test_fixtures/pid_controller_tf.v	/^	wire dac_nsync_out;$/;"	n
dac_nsync_out	test_fixtures/tle_adc_controller_tf.v	/^	wire dac_nsync_out;$/;"	n
dac_ref_set	pid_controller.v	/^wire								dac_ref_set;$/;"	n
dac_ref_set_ti	test_fixtures/pid_controller_tf.v	/^	parameter dac_ref_set_ti			= 8'h56;$/;"	c
dac_ref_set_ti	test_fixtures/tle_adc_controller_tf.v	/^	parameter dac_ref_set_ti			= 8'h56;$/;"	c
dac_ref_set_trig	frontpanel_interface.v	/^wire	[15:0]	dac_ref_set_trig;$/;"	n
dac_sclk_out	test_fixtures/pid_controller_tf.v	/^	wire dac_sclk_out;$/;"	n
dac_sclk_out	test_fixtures/tle_adc_controller_tf.v	/^	wire dac_sclk_out;$/;"	n
data	dac_controller.v	/^reg	[15:0] data;$/;"	r
data_a_in	test_fixtures/adc_controller_tf.v	/^	wire data_a_in;$/;"	n
data_a_out	test_fixtures/adc_controller_tf.v	/^	wire [17:0] data_a_out;$/;"	n
data_a_tx	test_fixtures/adc_controller_tf.v	/^	reg [TX_LEN-1:0] 	data_a_tx;$/;"	r
data_a_tx	test_fixtures/pid_controller_tf.v	/^	reg [TX_LEN-1:0] 	data_a_tx;$/;"	r
data_a_tx	test_fixtures/tle_adc_controller_tf.v	/^	reg [TX_LEN-1:0] 	data_a_tx;$/;"	r
data_b_in	test_fixtures/adc_controller_tf.v	/^	wire data_b_in;$/;"	n
data_b_out	test_fixtures/adc_controller_tf.v	/^	wire [17:0] data_b_out;$/;"	n
data_b_tx	test_fixtures/adc_controller_tf.v	/^	reg [TX_LEN-1:0] 	data_b_tx;$/;"	r
data_b_tx	test_fixtures/pid_controller_tf.v	/^	reg [TX_LEN-1:0] 	data_b_tx;$/;"	r
data_b_tx	test_fixtures/tle_adc_controller_tf.v	/^	reg [TX_LEN-1:0] 	data_b_tx;$/;"	r
data_bus_lower	dac_instr_queue.v	/^wire [W_DATA*N_CHAN\/2-1:0]	data_bus_lower;				\/\/ lower half of input data bus$/;"	n
data_bus_upper	dac_instr_queue.v	/^wire [W_DATA*N_CHAN\/2-1:0] data_bus_upper;				\/\/ upper half of input data bus$/;"	n
data_in	test_fixtures/pipe_tx_fifo_tf.v	/^	reg [15:0] data_in;$/;"	r
data_instr	dac_controller.v	/^wire	[31:0] data_instr;$/;"	n
data_out	router.v	/^wire	[W_CHAN-1:0]	data_out			[0:N_OUT-1]; 		\/\/ final output channels$/;"	n
data_out	test_fixtures/pipe_tx_fifo_tf.v	/^	wire [15:0] data_out;$/;"	n
data_valid	clk_sync.v	/^reg	[N_ADC-1:0]	data_valid;$/;"	r
data_valid_in	test_fixtures/pipe_tx_fifo_tf.v	/^	reg data_valid_in;$/;"	r
data_valid_out	test_fixtures/adc_controller_tf.v	/^	wire [5:0] data_valid_out;$/;"	n
data_valid_rdc	clk_sync.v	/^wire 					data_valid_rdc;$/;"	n
dcm_clk0	ok_library/okLibrary.v	/^	wire dcm_clk0, rstin, rst1, rst2, rst3, rst4; $/;"	n
dds_controller	dds_controller.v	/^module dds_controller($/;"	m
dds_csb_out	test_fixtures/pid_controller_tf.v	/^	wire [1:0] dds_csb_out;$/;"	n
dds_csb_out	test_fixtures/tle_adc_controller_tf.v	/^	wire [1:0] dds_csb_out;$/;"	n
dds_done	pid_controller.v	/^wire	[N_DDS-1:0]				dds_done;$/;"	n
dds_io_update_out	test_fixtures/pid_controller_tf.v	/^	wire [1:0] dds_io_update_out;$/;"	n
dds_io_update_out	test_fixtures/tle_adc_controller_tf.v	/^	wire [1:0] dds_io_update_out;$/;"	n
dds_reset_out	test_fixtures/pid_controller_tf.v	/^	wire [1:0] dds_reset_out;$/;"	n
dds_reset_out	test_fixtures/tle_adc_controller_tf.v	/^	wire [1:0] dds_reset_out;$/;"	n
dds_sclk_out	test_fixtures/pid_controller_tf.v	/^	wire [1:0] dds_sclk_out;$/;"	n
dds_sclk_out	test_fixtures/tle_adc_controller_tf.v	/^	wire [1:0] dds_sclk_out;$/;"	n
dds_sdio_out	test_fixtures/pid_controller_tf.v	/^	wire [1:0] dds_sdio_out;$/;"	n
dds_sdio_out	test_fixtures/tle_adc_controller_tf.v	/^	wire [1:0] dds_sdio_out;$/;"	n
din	ip_core/fifo_16.v	/^input [15 : 0] din;$/;"	p
din	ip_core/fifo_19.v	/^input [18 : 0] din;$/;"	p
dinstr_lower	dac_instr_queue.v	/^wire [W_DINS-1:0] dinstr_upper, dinstr_lower;			\/\/ dac instruction signals for upper and lower channels$/;"	n
dinstr_upper	dac_instr_queue.v	/^wire [W_DINS-1:0] dinstr_upper, dinstr_lower;			\/\/ dac instruction signals for upper and lower channels$/;"	n
dinstr_upper_reg	dac_instr_queue.v	/^reg [W_DINS-1:0] dinstr_upper_reg;$/;"	r
diq_chan	pid_controller.v	/^wire	[W_DAC_CHS-1:0]			diq_chan;$/;"	n
diq_data	pid_controller.v	/^wire	[W_DAC_DATA-1:0]			diq_data;$/;"	n
diq_data_valid	pid_controller.v	/^wire									diq_data_valid;$/;"	n
diq_input_bus	pid_controller.v	/^wire	[W_DAC_DATA*N_DAC-1:0]	diq_input_bus;$/;"	n
disp_hex	ip_core/fifo_16/simulation/fifo_16_tb.vhd	/^ PROCEDURE disp_hex(signal hex:IN STD_LOGIC_VECTOR(7 DOWNTO 0)) IS$/;"	p
disp_hex	ip_core/fifo_19/simulation/fifo_19_tb.vhd	/^ PROCEDURE disp_hex(signal hex:IN STD_LOGIC_VECTOR(7 DOWNTO 0)) IS$/;"	p
disp_str	ip_core/fifo_16/simulation/fifo_16_tb.vhd	/^ PROCEDURE disp_str(CONSTANT str:IN STRING) IS$/;"	p
disp_str	ip_core/fifo_19/simulation/fifo_19_tb.vhd	/^ PROCEDURE disp_str(CONSTANT str:IN STRING) IS$/;"	p
divroundup	ip_core/fifo_16/simulation/fifo_16_pkg.vhd	/^ FUNCTION divroundup ($/;"	f
divroundup	ip_core/fifo_19/simulation/fifo_19_pkg.vhd	/^ FUNCTION divroundup ($/;"	f
dout	ip_core/fifo_16.v	/^output [15 : 0] dout;$/;"	p
dout	ip_core/fifo_19.v	/^output [18 : 0] dout;$/;"	p
dv_lower	dac_instr_queue.v	/^wire [N_CHAN\/2-1:0]			dv_lower; 						\/\/ upper and lower halfs of data valid bus$/;"	n
dv_rdc_upper_reg	dac_instr_queue.v	/^reg dv_rdc_upper_reg;$/;"	r
dv_upper	dac_instr_queue.v	/^wire [N_CHAN\/2-1:0]			dv_upper; 						\/\/ upper and lower halfs of data valid bus$/;"	n
empty	ip_core/fifo_16.v	/^output empty;$/;"	p
empty	ip_core/fifo_19.v	/^output empty;$/;"	p
ep	ok_sim/okHost.v	/^reg [7:0]   ep;$/;"	r
ep	ok_sim/okHostCalls.v	/^   input    [7:0]    ep$/;"	p
ep	ok_sim/okHostCalls.v	/^   input    [7:0]    ep,$/;"	p
ep_addr	ok_library/okLibrary.v	/^	input  [7:0]  ep_addr;$/;"	p
ep_blockstrobe	ok_library/okLibrary.v	/^	output        ep_blockstrobe;$/;"	p
ep_clk	ok_library/okLibrary.v	/^	input         ep_clk;$/;"	p
ep_datahold	ok_sim/okWireIn.v	/^reg  [15:0] ep_datahold;$/;"	r
ep_datain	ok_library/okLibrary.v	/^	input  [15:0] ep_datain;$/;"	p
ep_dataout	ok_library/okLibrary.v	/^	output [15:0] ep_dataout;$/;"	p
ep_read	ok_library/okLibrary.v	/^	output        ep_read;$/;"	p
ep_ready	ok_library/okLibrary.v	/^	input         ep_ready;$/;"	p
ep_trigger	ok_library/okLibrary.v	/^	input  [15:0] ep_trigger;$/;"	p
ep_trigger	ok_library/okLibrary.v	/^	output [15:0] ep_trigger;$/;"	p
ep_trigger_p1	ok_sim/okTriggerOut.v	/^reg  [15:0] ep_trigger_p1;$/;"	r
ep_write	ok_library/okLibrary.v	/^	output        ep_write;$/;"	p
eptrig	ok_sim/okTriggerIn.v	/^reg  [15:0] eptrig;$/;"	r
eptrig	ok_sim/okTriggerOut.v	/^reg  [15:0] eptrig;$/;"	r
fdreout0_hi_dataout	ok_library/okLibrary.v	/^	wire [15:0] fdreout0_hi_dataout;$/;"	n
fdreout1_hi_drive	ok_library/okLibrary.v	/^	wire [15:0] fdreout1_hi_drive; $/;"	n
feature	dac_controller.v	/^wire	[3:0]	 feature;$/;"	n
fifo_16	ip_core/fifo_16.v	/^module fifo_16($/;"	m
fifo_16_dgen	ip_core/fifo_16/simulation/fifo_16_dgen.vhd	/^ENTITY fifo_16_dgen IS$/;"	e
fifo_16_dverif	ip_core/fifo_16/simulation/fifo_16_dverif.vhd	/^ENTITY fifo_16_dverif IS$/;"	e
fifo_16_exdes	ip_core/fifo_16/example_design/fifo_16_exdes.vhd	/^entity fifo_16_exdes is$/;"	e
fifo_16_pctrl	ip_core/fifo_16/simulation/fifo_16_pctrl.vhd	/^ENTITY fifo_16_pctrl IS$/;"	e
fifo_16_pkg	ip_core/fifo_16/simulation/fifo_16_pkg.vhd	/^PACKAGE BODY fifo_16_pkg IS$/;"	P
fifo_16_pkg	ip_core/fifo_16/simulation/fifo_16_pkg.vhd	/^PACKAGE fifo_16_pkg IS$/;"	P
fifo_16_rng	ip_core/fifo_16/simulation/fifo_16_rng.vhd	/^ENTITY fifo_16_rng IS$/;"	e
fifo_16_synth	ip_core/fifo_16/simulation/fifo_16_synth.vhd	/^ENTITY fifo_16_synth IS$/;"	e
fifo_16_tb	ip_core/fifo_16/simulation/fifo_16_tb.vhd	/^ENTITY fifo_16_tb IS$/;"	e
fifo_19	ip_core/fifo_19.v	/^module fifo_19($/;"	m
fifo_19_dgen	ip_core/fifo_19/simulation/fifo_19_dgen.vhd	/^ENTITY fifo_19_dgen IS$/;"	e
fifo_19_dverif	ip_core/fifo_19/simulation/fifo_19_dverif.vhd	/^ENTITY fifo_19_dverif IS$/;"	e
fifo_19_exdes	ip_core/fifo_19/example_design/fifo_19_exdes.vhd	/^entity fifo_19_exdes is$/;"	e
fifo_19_pctrl	ip_core/fifo_19/simulation/fifo_19_pctrl.vhd	/^ENTITY fifo_19_pctrl IS$/;"	e
fifo_19_pkg	ip_core/fifo_19/simulation/fifo_19_pkg.vhd	/^PACKAGE BODY fifo_19_pkg IS$/;"	P
fifo_19_pkg	ip_core/fifo_19/simulation/fifo_19_pkg.vhd	/^PACKAGE fifo_19_pkg IS$/;"	P
fifo_19_rng	ip_core/fifo_19/simulation/fifo_19_rng.vhd	/^ENTITY fifo_19_rng IS$/;"	e
fifo_19_synth	ip_core/fifo_19/simulation/fifo_19_synth.vhd	/^ENTITY fifo_19_synth IS$/;"	e
fifo_19_tb	ip_core/fifo_19/simulation/fifo_19_tb.vhd	/^ENTITY fifo_19_tb IS$/;"	e
fifo_almost_full	pipe_tx_fifo.v	/^wire fifo_almost_full, fifo_half_full, fifo_rd_en;$/;"	n
fifo_data_valid	dac_instr_queue.v	/^wire fifo_data_valid;$/;"	n
fifo_din	dac_instr_queue.v	/^wire [W_DINS-1:0] fifo_din, fifo_dout;$/;"	n
fifo_dout	dac_instr_queue.v	/^wire [W_DINS-1:0] fifo_din, fifo_dout;$/;"	n
fifo_dout	pipe_tx_fifo.v	/^wire [15:0] fifo_dout;$/;"	n
fifo_half_full	pipe_tx_fifo.v	/^wire fifo_almost_full, fifo_half_full, fifo_rd_en;$/;"	n
fifo_rd_en	dac_instr_queue.v	/^wire fifo_wr_en, fifo_rd_en;$/;"	n
fifo_rd_en	pipe_tx_fifo.v	/^wire fifo_almost_full, fifo_half_full, fifo_rd_en;$/;"	n
fifo_wr_en	dac_instr_queue.v	/^wire fifo_wr_en, fifo_rd_en;$/;"	n
freq	dds_controller.v	/^reg	[47:0]	freq;						\/\/ active frequency value$/;"	r
freq_wr_instr	dds_controller.v	/^wire	[63:0]	freq_wr_instr;			\/\/ frequency write instruction $/;"	n
frontpanel_interface	frontpanel_interface.v	/^module frontpanel_interface #($/;"	m
full	ip_core/fifo_16.v	/^output full;$/;"	p
full	ip_core/fifo_19.v	/^output full;$/;"	p
glbl	ok_sim/glbl.v	/^module glbl ();$/;"	m
hexstr_to_std_logic_vec	ip_core/fifo_16/simulation/fifo_16_pkg.vhd	/^  FUNCTION hexstr_to_std_logic_vec( $/;"	f
hexstr_to_std_logic_vec	ip_core/fifo_19/simulation/fifo_19_pkg.vhd	/^  FUNCTION hexstr_to_std_logic_vec( $/;"	f
hi_aa	test_fixtures/pid_controller_tf.v	/^	wire hi_aa;$/;"	n
hi_datain	ok_library/okLibrary.v	/^	wire [15:0] hi_datain;$/;"	n
hi_dataout	ok_sim/okHost.v	/^reg [15:0]  hi_dataout;$/;"	r
hi_dataout	ok_sim/okHostCalls.v	/^reg   [15:0]   hi_dataout;$/;"	r
hi_in	test_fixtures/pid_controller_tf.v	/^	reg [7:0] hi_in;$/;"	r
hi_in	test_fixtures/tle_adc_controller_tf.v	/^	reg [7:0] hi_in;$/;"	r
hi_inout	test_fixtures/pid_controller_tf.v	/^	wire [15:0] hi_inout;$/;"	n
hi_inout	test_fixtures/tle_adc_controller_tf.v	/^	wire [15:0] hi_inout;$/;"	n
hi_out	test_fixtures/pid_controller_tf.v	/^	wire [1:0] hi_out;$/;"	n
hi_out	test_fixtures/tle_adc_controller_tf.v	/^	wire [1:0] hi_out;$/;"	n
i	ok_library/okLibrary.v	/^	integer i;$/;"	r
i	ok_sim/okHost.v	/^integer     i, j, k;$/;"	r
i	ok_sim/okHostCalls.v	/^   integer           i;$/;"	r
i	ok_sim/okHostCalls.v	/^   integer           len, blockSize, blockNum, i, j, k;$/;"	r
i	ok_sim/okHostCalls.v	/^   integer           len, i, j, k, blockSize;$/;"	r
i	ok_sim/okWireOR.v	/^	integer i;$/;"	r
idle	oversample_filter.v	/^wire	idle;$/;"	n
if_then_else	ip_core/fifo_16/simulation/fifo_16_pkg.vhd	/^  FUNCTION if_then_else ($/;"	f
if_then_else	ip_core/fifo_19/simulation/fifo_19_pkg.vhd	/^  FUNCTION if_then_else ($/;"	f
input	adc_controller.v	/^	input wire						reset_in, 			\/\/ system reset$/;"	c
input	dac_controller.v	/^	input wire						reset_in,$/;"	c
input	dac_instr_queue.v	/^	input wire								reset_in,		\/\/ system reset$/;"	c
input	frontpanel_interface.v	/^	input wire										clk17_in,$/;"	c
input	mux_n_chan.v	/^	input wire[W_SEL-1:0]			chan_select_in,	\/\/ channel select$/;"	c
input	ok_sim/okHostCalls.v	/^   input    [15:0]   mask$/;"	p
input	ok_sim/okHostCalls.v	/^   input    [15:0]   val,$/;"	p
input	ok_sim/okHostCalls.v	/^   input    [31:0]   blockLength,$/;"	p
input	ok_sim/okHostCalls.v	/^   input    [31:0]   length$/;"	p
input	ok_sim/okHostCalls.v	/^   input    [31:0]  trig_bit$/;"	p
input	output_preprocessor.v	/^	input wire								reset_in, 			\/\/ system reset$/;"	c
input	oversample_filter.v	/^	input wire								reset_in,			\/\/ system reset$/;"	c
input	pid_controller.v	/^	input wire							clk17_in,				\/\/ 17MHz adc serial clock$/;"	c
input	pid_core.v	/^	input wire								reset_in,		\/\/ system reset$/;"	c
iobf0_hi_datain	ok_library/okLibrary.v	/^	wire [15:0] iobf0_hi_datain;$/;"	n
iodly0_datain	ok_library/okLibrary.v	/^	wire [15:0] iodly0_datain;$/;"	n
j	ok_sim/okHost.v	/^integer     i, j, k;$/;"	r
j	ok_sim/okHostCalls.v	/^   integer           len, blockSize, blockNum, i, j, k;$/;"	r
j	ok_sim/okHostCalls.v	/^   integer           len, i, j, k, blockSize;$/;"	r
k	ok_sim/okHost.v	/^integer     i, j, k;$/;"	r
k	ok_sim/okHostCalls.v	/^   integer           len, blockSize, blockNum, i, j, k;$/;"	r
k	ok_sim/okHostCalls.v	/^   integer           len, i, j, k, blockSize;$/;"	r
k	test_fixtures/pid_controller_tf.v	/^	integer k;$/;"	r
k	test_fixtures/tle_adc_controller_tf.v	/^	integer k;$/;"	r
len	ok_sim/okHostCalls.v	/^   integer           len, blockSize, blockNum, i, j, k;$/;"	r
len	ok_sim/okHostCalls.v	/^   integer           len, i, j, k, blockSize;$/;"	r
length	ok_sim/okHostCalls.v	/^   input    [31:0]   length$/;"	p
log2roundup	ip_core/fifo_16/simulation/fifo_16_pkg.vhd	/^  FUNCTION log2roundup ($/;"	f
log2roundup	ip_core/fifo_19/simulation/fifo_19_pkg.vhd	/^  FUNCTION log2roundup ($/;"	f
mask	ok_sim/okHostCalls.v	/^   input    [15:0]   mask$/;"	p
mask	test_fixtures/pid_controller_tf.v	/^	parameter mask							= 32'hffffffff;$/;"	c
mask	test_fixtures/tle_adc_controller_tf.v	/^	parameter mask					= 32'hffffffff;$/;"	c
mod_update_db	test_fixtures/pid_controller_tf.v	/^	wire mod_update_db;$/;"	n
mod_update_db	test_fixtures/tle_adc_controller_tf.v	/^	wire mod_update_db;$/;"	n
module_update	pid_controller.v	/^wire								module_update;$/;"	n
module_update_ti	test_fixtures/pid_controller_tf.v	/^	parameter module_update_ti			= 8'h57;$/;"	c
module_update_ti	test_fixtures/tle_adc_controller_tf.v	/^	parameter module_update_ti			= 8'h57;$/;"	c
module_update_trig	frontpanel_interface.v	/^wire	[15:0] 	module_update_trig;$/;"	n
mux_data_out	router.v	/^wire	[W_CHAN-1:0]	mux_data_out	[0:N_OUT-1]; 		\/\/ mux output channels$/;"	n
mux_dout_lower	dac_instr_queue.v	/^wire [W_DATA-1:0] mux_dout_upper, mux_dout_lower;		\/\/ mux output data for upper and lower channels$/;"	n
mux_dout_upper	dac_instr_queue.v	/^wire [W_DATA-1:0] mux_dout_upper, mux_dout_lower;		\/\/ mux output data for upper and lower channels$/;"	n
mux_n_chan	mux_n_chan.v	/^module mux_n_chan #($/;"	m
mux_sel_lower	dac_instr_queue.v	/^wire [W_CHS-1:0] mux_sel_upper, mux_sel_lower;					\/\/ mux select signals for upper and lower channels$/;"	n
mux_sel_upper	dac_instr_queue.v	/^wire [W_CHS-1:0] mux_sel_upper, mux_sel_lower;					\/\/ mux select signals for upper and lower channels$/;"	n
n_cs_out	test_fixtures/adc_controller_tf.v	/^	wire n_cs_out;$/;"	n
next_state	clk_sync.v	/^reg	[2:0] 				next_state;	\/\/ state machine next state$/;"	r
next_state	dac_controller.v	/^reg	[2:0]		next_state;$/;"	r
next_state	dds_controller.v	/^reg	[2:0] 	next_state; 			\/\/ next state$/;"	r
next_state	output_preprocessor.v	/^reg			[2:0]			next_state; 					\/\/ next state$/;"	r
next_state	oversample_filter.v	/^reg	[2:0]		next_state;$/;"	r
next_state	pid_core.v	/^reg			[2:0] 		next_state; 		\/\/ next state$/;"	r
next_state	pipe_tx_fifo.v	/^reg	[2:0] 	next_state;$/;"	r
ok1	frontpanel_interface.v	/^wire	[30:0]			ok1;$/;"	n
ok1	ok_library/okLibrary.v	/^	input  [30:0] ok1;$/;"	p
ok1	ok_library/okLibrary.v	/^	output [30:0] ok1;$/;"	p
ok1_command	ok_sim/okHost.v	/^reg [4:0]   ok1_command;$/;"	r
ok1t	ok_sim/okHost.v	/^reg [30:0]  ok1t;$/;"	r
ok2	frontpanel_interface.v	/^wire	[16:0] 			ok2;$/;"	n
ok2	ok_library/okLibrary.v	/^	input  [16:0] ok2;$/;"	p
ok2	ok_library/okLibrary.v	/^	output [16:0] ok2;$/;"	p
ok2x	frontpanel_interface.v	/^wire	[17*(N_ADC+1)-1:0]	ok2x;	\/\/ must have space for continuous update registers for each channel and one bulk update register$/;"	n
okBTPipeIn	ok_library/okLibrary.v	/^module okBTPipeIn(ok1, ok2, ep_addr, ep_write, ep_blockstrobe, ep_dataout, ep_ready);$/;"	m
okBTPipeIn	ok_sim/okBTPipeIn.v	/^module okBTPipeIn($/;"	m
okBTPipeOut	ok_library/okLibrary.v	/^module okBTPipeOut(ok1, ok2, ep_addr, ep_read, ep_blockstrobe, ep_datain, ep_ready);$/;"	m
okBTPipeOut	ok_sim/okBTPipeOut.v	/^module okBTPipeOut($/;"	m
okCH	ok_library/okLibrary.v	/^	output [20:0] okCH;$/;"	p
okCH	ok_library/okLibrary.v	/^	wire [20:0] okCH;$/;"	n
okCoreHarness	ok_library/okLibrary.v	/^module okCoreHarness(okHC, okCH, ok1, ok2);$/;"	m
okHC	ok_library/okLibrary.v	/^	input  [24:0] okHC;$/;"	p
okHC	ok_library/okLibrary.v	/^	wire [24:0] okHC;$/;"	n
okHost	ok_library/okLibrary.v	/^module okHost$/;"	m
okHost	ok_sim/okHost.v	/^module okHost($/;"	m
okHost_XEM5010	ok_sim/okHost_XEM5010.v	/^module okHost_XEM5010($/;"	m
okPipeIn	ok_library/okLibrary.v	/^module okPipeIn(ok1, ok2, ep_addr, ep_write, ep_dataout);$/;"	m
okPipeIn	ok_sim/okPipeIn.v	/^module okPipeIn($/;"	m
okPipeOut	ok_library/okLibrary.v	/^module okPipeOut(ok1, ok2, ep_addr, ep_read, ep_datain);$/;"	m
okPipeOut	ok_sim/okPipeOut.v	/^module okPipeOut($/;"	m
okTriggerIn	ok_library/okLibrary.v	/^module okTriggerIn(ok1, ep_addr, ep_clk, ep_trigger);$/;"	m
okTriggerIn	ok_sim/okTriggerIn.v	/^module okTriggerIn($/;"	m
okTriggerOut	ok_library/okLibrary.v	/^module okTriggerOut(ok1, ok2, ep_addr, ep_clk, ep_trigger);$/;"	m
okTriggerOut	ok_sim/okTriggerOut.v	/^module okTriggerOut($/;"	m
okWireIn	ok_library/okLibrary.v	/^module okWireIn(ok1, ep_addr, ep_dataout);$/;"	m
okWireIn	ok_sim/okWireIn.v	/^module okWireIn($/;"	m
okWireOR	ok_library/okLibrary.v	/^module okWireOR # (parameter N = 1)	($/;"	m
okWireOR	ok_sim/okWireOR.v	/^module okWireOR # (parameter N = 1)	($/;"	m
okWireOut	ok_library/okLibrary.v	/^module okWireOut(ok1, ok2, ep_addr, ep_datain);$/;"	m
okWireOut	ok_sim/okWireOut.v	/^module okWireOut($/;"	m
one_hot	dac_instr_queue.v	/^	input [3:0] one_hot;$/;"	p
opp_amp_data	pid_controller.v	/^wire	[W_DDS_AMP-1:0]		opp_amp_data[0:N_DDS-1];$/;"	n
opp_amp_data_valid	pid_controller.v	/^wire	[N_DDS-1:0]				opp_amp_data_valid;$/;"	n
opp_dac_data	pid_controller.v	/^wire	[W_DAC_DATA-1:0]		opp_dac_data[0:N_DAC-1];$/;"	n
opp_dac_data_valid	pid_controller.v	/^wire	[N_DAC-1:0]				opp_dac_data_valid;$/;"	n
opp_freq_data	pid_controller.v	/^wire	[W_DDS_FREQ-1:0]		opp_freq_data[0:N_DDS-1];$/;"	n
opp_freq_data_valid	pid_controller.v	/^wire	[N_DDS-1:0]				opp_freq_data_valid;$/;"	n
opp_init	pid_controller.v	/^wire	[47:0]					opp_init;$/;"	n
opp_init_owi0	test_fixtures/pid_controller_tf.v	/^	parameter opp_init_owi0				= 8'h0b;$/;"	c
opp_init_owi0	test_fixtures/tle_adc_controller_tf.v	/^	parameter opp_init_owi0				= 8'h0b;$/;"	c
opp_init_owi1	test_fixtures/pid_controller_tf.v	/^	parameter opp_init_owi1				= 8'h0c;$/;"	c
opp_init_owi1	test_fixtures/tle_adc_controller_tf.v	/^	parameter opp_init_owi1				= 8'h0c;$/;"	c
opp_init_owi2	test_fixtures/pid_controller_tf.v	/^	parameter opp_init_owi2				= 8'h0d;$/;"	c
opp_init_owi2	test_fixtures/tle_adc_controller_tf.v	/^	parameter opp_init_owi2				= 8'h0d;$/;"	c
opp_init_wire	frontpanel_interface.v	/^wire	[15:0] 	opp_init_wire[0:3];$/;"	n
opp_max	pid_controller.v	/^wire	[47:0]					opp_max;$/;"	n
opp_max_owi0	test_fixtures/pid_controller_tf.v	/^	parameter opp_max_owi0				= 8'h11;$/;"	c
opp_max_owi0	test_fixtures/tle_adc_controller_tf.v	/^	parameter opp_max_owi0				= 8'h11;$/;"	c
opp_max_owi1	test_fixtures/pid_controller_tf.v	/^	parameter opp_max_owi1				= 8'h12;$/;"	c
opp_max_owi1	test_fixtures/tle_adc_controller_tf.v	/^	parameter opp_max_owi1				= 8'h12;$/;"	c
opp_max_owi2	test_fixtures/pid_controller_tf.v	/^	parameter opp_max_owi2				= 8'h13;$/;"	c
opp_max_owi2	test_fixtures/tle_adc_controller_tf.v	/^	parameter opp_max_owi2				= 8'h13;$/;"	c
opp_max_wire	frontpanel_interface.v	/^wire	[15:0]	opp_max_wire[0:3];$/;"	n
opp_min	pid_controller.v	/^wire	[47:0]					opp_min;$/;"	n
opp_min_owi0	test_fixtures/pid_controller_tf.v	/^	parameter opp_min_owi0				= 8'h0e;$/;"	c
opp_min_owi0	test_fixtures/tle_adc_controller_tf.v	/^	parameter opp_min_owi0				= 8'h0e;$/;"	c
opp_min_owi1	test_fixtures/pid_controller_tf.v	/^	parameter opp_min_owi1				= 8'h0f;$/;"	c
opp_min_owi1	test_fixtures/tle_adc_controller_tf.v	/^	parameter opp_min_owi1				= 8'h0f;$/;"	c
opp_min_owi2	test_fixtures/pid_controller_tf.v	/^	parameter opp_min_owi2				= 8'h10;$/;"	c
opp_min_owi2	test_fixtures/tle_adc_controller_tf.v	/^	parameter opp_min_owi2				= 8'h10;$/;"	c
opp_min_wire	frontpanel_interface.v	/^wire	[15:0]	opp_min_wire[0:3];$/;"	n
opp_multiplier	pid_controller.v	/^wire	[7:0]						opp_multiplier;$/;"	n
opp_phase_data	pid_controller.v	/^wire	[W_DDS_PHASE-1:0]		opp_phase_data[0:N_DDS-1];$/;"	n
opp_phase_data_valid	pid_controller.v	/^wire	[N_DDS-1:0]				opp_phase_data_valid;$/;"	n
opp_update_en	pid_controller.v	/^wire	[N_OUT-1:0]				opp_update_en;$/;"	n
opp_update_en_owi	test_fixtures/pid_controller_tf.v	/^	parameter opp_update_en_owi		= 8'h14;$/;"	c
opp_update_en_owi	test_fixtures/tle_adc_controller_tf.v	/^	parameter opp_update_en_owi		= 8'h14;$/;"	c
opp_update_en_wire	frontpanel_interface.v	/^wire	[15:0] 	opp_update_en_wire;$/;"	n
os_cur	adc_controller.v	/^reg	[2:0]					os_cur;			\/\/ active oversampling mode$/;"	r
os_in	test_fixtures/adc_controller_tf.v	/^	reg [2:0] os_in;$/;"	r
os_out	test_fixtures/adc_controller_tf.v	/^	wire [2:0] os_out;$/;"	n
osf_activate	pid_controller.v	/^wire	[N_ADC-1:0]				osf_activate;$/;"	n
osf_activate_owi	test_fixtures/pid_controller_tf.v	/^	parameter osf_activate_owi			= 8'h15;$/;"	c
osf_activate_owi	test_fixtures/tle_adc_controller_tf.v	/^	parameter osf_activate_owi			= 8'h15;$/;"	c
osf_activate_wire	frontpanel_interface.v	/^wire	[15:0]	osf_activate_wire;$/;"	n
osf_bulk_data_opo	test_fixtures/pid_controller_tf.v	/^	parameter osf_bulk_data_opo		= 8'ha3;$/;"	c
osf_bulk_data_opo	test_fixtures/tle_adc_controller_tf.v	/^	parameter osf_bulk_data_opo		= 8'ha3;$/;"	c
osf_cycle_delay	pid_controller.v	/^wire	[W_OSF_CD-1:0]			osf_cycle_delay;$/;"	n
osf_cycle_delay_owi	test_fixtures/pid_controller_tf.v	/^	parameter osf_cycle_delay_owi		= 8'h02;$/;"	c
osf_cycle_delay_owi	test_fixtures/tle_adc_controller_tf.v	/^	parameter osf_cycle_delay_owi		= 8'h02;$/;"	c
osf_cycle_delay_wire	frontpanel_interface.v	/^wire	[15:0]	osf_cycle_delay_wire;$/;"	n
osf_data	pid_controller.v	/^wire	[W_OSF-1:0]				osf_data[0:N_ADC-1];$/;"	n
osf_data_valid	pid_controller.v	/^wire	[N_ADC-1:0]				osf_data_valid;$/;"	n
osf_log_ovr_owi	test_fixtures/pid_controller_tf.v	/^	parameter osf_log_ovr_owi			= 8'h03;$/;"	c
osf_log_ovr_owi	test_fixtures/tle_adc_controller_tf.v	/^	parameter osf_log_ovr_owi			= 8'h03;$/;"	c
osf_osm	pid_controller.v	/^wire	[W_OSF_OSM-1:0]		osf_osm;$/;"	n
osf_osm_wire	frontpanel_interface.v	/^wire	[15:0]	osf_osm_wire;$/;"	n
osf_reset	oversample_filter.v	/^wire	osf_reset;	\/\/ local reset signal which is activated by system reset or channel deactive$/;"	n
osf_update_en	pid_controller.v	/^wire	[N_ADC-1:0]				osf_update_en;$/;"	n
osf_update_en_owi	test_fixtures/pid_controller_tf.v	/^	parameter osf_update_en_owi		= 8'h04;$/;"	c
osf_update_en_owi	test_fixtures/tle_adc_controller_tf.v	/^	parameter osf_update_en_owi		= 8'h04;$/;"	c
osf_update_en_wire	frontpanel_interface.v	/^wire	[15:0]	osf_update_en_wire;$/;"	n
osm_cur	oversample_filter.v	/^reg	[W_OSM-1:0]	osm_cur;$/;"	r
out_buf_en	test_fixtures/pid_controller_tf.v	/^	wire out_buf_en;$/;"	n
out_buf_en	test_fixtures/tle_adc_controller_tf.v	/^	wire out_buf_en;$/;"	n
output_active	router.v	/^reg	[N_OUT-1:0]		output_active;							\/\/ registed output channel activations$/;"	r
output_preprocessor	output_preprocessor.v	/^module output_preprocessor #($/;"	m
oversample_filter	oversample_filter.v	/^module oversample_filter #($/;"	m
parameter	adc_controller.v	/^	parameter N_CHAN			= 8,						\/\/ number of adc channels to be read, oversample rate must be >=2 to support 8 channels$/;"	c
parameter	clk_sync.v	/^	parameter N_ADC	= 8							\/\/ number of active adc channels$/;"	c
parameter	dac_controller.v	/^	parameter W_CHS	= 3,							\/\/ width of channel select signal$/;"	c
parameter	dac_instr_queue.v	/^	parameter W_CHS		= 3,		\/\/ width of dac channel select signal$/;"	c
parameter	frontpanel_interface.v	/^	parameter N_OUT		= 8,									\/\/ number of output channels$/;"	c
parameter	frontpanel_interface.v	/^	parameter W_OSF_CD	= 16,									\/\/ width of osf cycle delay signal$/;"	c
parameter	mux_n_chan.v	/^	parameter W_SEL	= 4,									\/\/ width of select signal$/;"	c
parameter	output_preprocessor.v	/^	parameter W_OUT			= 16,								\/\/ width of output data bus$/;"	c
parameter	oversample_filter.v	/^	parameter W_OUT	= 18,										\/\/ width of output data$/;"	c
parameter	pid_controller.v	/^	parameter N_DAC			= 8,	\/\/ number of dac channels$/;"	c
parameter	pid_controller.v	/^	parameter W_ADC			= 18, \/\/ width of adc channels$/;"	c
parameter	pid_controller.v	/^	parameter W_DAC_CHS		= 3,	\/\/ width of dac channel input$/;"	c
parameter	pid_controller.v	/^	parameter W_DDS_AMP 		= 10, \/\/ width of dds amplitude instruction$/;"	c
parameter	pid_controller.v	/^	parameter W_DDS_FREQ		= 48, \/\/ width of dds frequency word$/;"	c
parameter	pid_controller.v	/^	parameter W_PID			= 18, \/\/ width of pid core output$/;"	c
parameter	pid_core.v	/^	parameter W_OUT 			= 18,							\/\/ output data width$/;"	c
parameter	pipe_tx_fifo.v	/^	parameter N_ADC		= 6,$/;"	c
parameter	pipe_tx_fifo.v	/^	parameter PIPE_ADDR	= 8'ha3$/;"	c
parameter	router.v	/^	parameter N_OUT	= 8										\/\/ number of output channels$/;"	c
parameter	router.v	/^	parameter W_SEL	= 4,										\/\/ width of select signals$/;"	c
pfifo_dout	frontpanel_interface.v	/^wire [15:0] pfifo_dout;$/;"	n
phase	dds_controller.v	/^reg	[13:0]	phase;					\/\/ active phase value$/;"	r
phase_wr_instr	dds_controller.v	/^wire	[31:0] 	phase_wr_instr;		\/\/ phase write instruction $/;"	n
pid_clear	pid_controller.v	/^wire	[N_ADC-1:0]				pid_clear;$/;"	n
pid_clear_ti	test_fixtures/pid_controller_tf.v	/^	parameter pid_clear_ti				= 8'h55;$/;"	c
pid_clear_ti	test_fixtures/tle_adc_controller_tf.v	/^	parameter pid_clear_ti				= 8'h55;$/;"	c
pid_clear_trig	frontpanel_interface.v	/^wire	[15:0] 	pid_clear_trig;$/;"	n
pid_controller	pid_controller.v	/^module pid_controller #($/;"	m
pid_controller_tf	test_fixtures/pid_controller_tf.v	/^module pid_controller_tf;$/;"	m
pid_core	pid_core.v	/^module pid_core #($/;"	m
pid_d_coef	pid_controller.v	/^wire	[15:0]					pid_d_coef;$/;"	n
pid_d_coef_owi	test_fixtures/pid_controller_tf.v	/^	parameter pid_d_coef_owi			= 8'h07;$/;"	c
pid_d_coef_owi	test_fixtures/tle_adc_controller_tf.v	/^	parameter pid_d_coef_owi			= 8'h07;$/;"	c
pid_d_coef_wire	frontpanel_interface.v	/^wire	[15:0] 	pid_d_coef_wire;$/;"	n
pid_data	pid_controller.v	/^wire	[W_PID-1:0]				pid_data[0:N_ADC-1];$/;"	n
pid_data_valid	pid_controller.v	/^wire	[N_ADC-1:0]				pid_data_valid;$/;"	n
pid_i_coef	pid_controller.v	/^wire	[15:0]					pid_i_coef;$/;"	n
pid_i_coef_owi	test_fixtures/pid_controller_tf.v	/^	parameter pid_i_coef_owi			= 8'h06;$/;"	c
pid_i_coef_owi	test_fixtures/tle_adc_controller_tf.v	/^	parameter pid_i_coef_owi			= 8'h06;$/;"	c
pid_i_coef_wire	frontpanel_interface.v	/^wire	[15:0] 	pid_i_coef_wire;$/;"	n
pid_lock_en	pid_controller.v	/^wire	[N_ADC-1:0]				pid_lock_en;$/;"	n
pid_lock_en_owi	test_fixtures/pid_controller_tf.v	/^	parameter pid_lock_en_owi			= 8'h17;$/;"	c
pid_lock_en_wire	frontpanel_interface.v	/^wire	[15:0]	pid_lock_en_wire;$/;"	n
pid_p_coef	pid_controller.v	/^wire	[15:0]					pid_p_coef;$/;"	n
pid_p_coef_owi	test_fixtures/pid_controller_tf.v	/^	parameter pid_p_coef_owi			= 8'h05;$/;"	c
pid_p_coef_owi	test_fixtures/tle_adc_controller_tf.v	/^	parameter pid_p_coef_owi			= 8'h05;$/;"	c
pid_p_coef_wire	frontpanel_interface.v	/^wire	[15:0] 	pid_p_coef_wire;$/;"	n
pid_setpoint	pid_controller.v	/^wire	[15:0]					pid_setpoint;$/;"	n
pid_setpoint_owi	test_fixtures/pid_controller_tf.v	/^	parameter pid_setpoint_owi			= 8'h04;$/;"	c
pid_setpoint_owi	test_fixtures/tle_adc_controller_tf.v	/^	parameter pid_setpoint_owi			= 8'h04;$/;"	c
pid_setpoint_wire	frontpanel_interface.v	/^wire	[15:0] 	pid_setpoint_wire;$/;"	n
pid_update_en	pid_controller.v	/^wire	[N_ADC-1:0]				pid_update_en;$/;"	n
pid_update_en_owi	test_fixtures/pid_controller_tf.v	/^	parameter pid_update_en_owi		= 8'h08;$/;"	c
pid_update_en_owi	test_fixtures/tle_adc_controller_tf.v	/^	parameter pid_update_en_owi		= 8'h08;$/;"	c
pid_update_en_wire	frontpanel_interface.v	/^wire	[15:0] 	pid_update_en_wire;$/;"	n
pipeIn	test_fixtures/pid_controller_tf.v	/^	reg  [7:0]  pipeIn [0:(pipeInSize-1)];$/;"	r
pipeIn	test_fixtures/tle_adc_controller_tf.v	/^	reg  [7:0]  pipeIn [0:(pipeInSize-1)];$/;"	r
pipeInSize	test_fixtures/pid_controller_tf.v	/^	parameter pipeInSize = 1024;      \/\/ REQUIRED: byte (must be even) length of default$/;"	c
pipeInSize	test_fixtures/tle_adc_controller_tf.v	/^	parameter pipeInSize = 1024;      \/\/ REQUIRED: byte (must be even) length of default$/;"	c
pipeLength	ok_sim/okHost.v	/^reg [31:0]  pipeLength;$/;"	r
pipeOut	test_fixtures/pid_controller_tf.v	/^	reg  [7:0]  pipeOut [0:(pipeOutSize-1)];$/;"	r
pipeOut	test_fixtures/tle_adc_controller_tf.v	/^	reg  [7:0]  pipeOut [0:(pipeOutSize-1)];$/;"	r
pipeOutSize	test_fixtures/pid_controller_tf.v	/^	parameter pipeOutSize = 1024;     \/\/ REQUIRED: byte (must be even) length of default$/;"	c
pipeOutSize	test_fixtures/tle_adc_controller_tf.v	/^	parameter pipeOutSize = 8;     \/\/ REQUIRED: byte (must be even) length of default$/;"	c
pipe_read	frontpanel_interface.v	/^wire pipe_read;$/;"	n
pipe_read	pipe_tx_fifo.v	/^wire pipe_read;$/;"	n
pipe_read_in	test_fixtures/pipe_tx_fifo_tf.v	/^	reg pipe_read_in;$/;"	r
pipe_tx_fifo	pipe_tx_fifo.v	/^module pipe_tx_fifo #($/;"	m
pipe_tx_fifo_tf	test_fixtures/pipe_tx_fifo_tf.v	/^module pipe_tx_fifo_tf;$/;"	m
prefix	dac_controller.v	/^wire	[3:0]	 prefix;$/;"	n
prog_full	ip_core/fifo_16.v	/^output prog_full;$/;"	p
rd_clk	ip_core/fifo_16.v	/^input rd_clk;$/;"	p
rd_clk_period_by_2	ip_core/fifo_16/simulation/fifo_16_tb.vhd	/^ CONSTANT rd_clk_period_by_2 : TIME := 200 ns;$/;"	c
rd_count	pipe_tx_fifo.v	/^reg	[11:0]	rd_count;$/;"	r
rd_counter	adc_controller.v	/^reg	[7:0]					rd_counter;		\/\/ read state machine counter$/;"	r
rd_cur_state	adc_controller.v	/^reg	[2:0]					rd_cur_state;	\/\/ read state machine current state$/;"	r
rd_en	ip_core/fifo_16.v	/^input rd_en;$/;"	p
rd_en	ip_core/fifo_19.v	/^input rd_en;$/;"	p
rd_next_state	adc_controller.v	/^reg	[2:0]					rd_next_state;	\/\/ read state machine next state$/;"	r
ref_set_instr	dac_controller.v	/^wire	[31:0] ref_set_instr; \/\/ parallel data instruction$/;"	n
reg	adc_controller.v	/^	output reg signed		[W_OUT-1:0]		data_a_out,			\/\/ channel a data out$/;"	p
reg	adc_controller.v	/^	output reg signed		[W_OUT-1:0]		data_b_out			\/\/ channel b data out$/;"	p
reg	clk_sync.v	/^	output reg	[W_DATA-1:0]	data_a_out,$/;"	p
reg	clk_sync.v	/^	output reg	[W_DATA-1:0]	data_b_out$/;"	p
reg	dds_controller.v	/^	output reg				csb_out,				\/\/ chip select signal to dds$/;"	p
reg	ok_library/okLibrary.v	/^	output reg  [16:0]     ok2,$/;"	p
reg	ok_sim/okBTPipeIn.v	/^	output reg         ep_write,$/;"	p
reg	ok_sim/okBTPipeIn.v	/^	output reg  [15:0] ep_dataout,$/;"	p
reg	ok_sim/okHost.v	/^	output  reg  [1:0]  hi_out,$/;"	p
reg	ok_sim/okPipeIn.v	/^	output reg         ep_write,$/;"	p
reg	ok_sim/okPipeIn.v	/^	output reg  [15:0] ep_dataout$/;"	p
reg	ok_sim/okTriggerIn.v	/^	output reg  [15:0] ep_trigger$/;"	p
reg	ok_sim/okWireIn.v	/^	output reg  [15:0] ep_dataout$/;"	p
reg	ok_sim/okWireOR.v	/^	output reg  [16:0]     ok2,$/;"	p
reset_in	test_fixtures/adc_controller_tf.v	/^	reg reset_in;$/;"	r
reset_in	test_fixtures/pipe_tx_fifo_tf.v	/^	reg reset_in;$/;"	r
reset_out	test_fixtures/adc_controller_tf.v	/^	wire reset_out;$/;"	n
router	router.v	/^module router #($/;"	m
rst	ip_core/fifo_16.v	/^input rst;$/;"	p
rst	ip_core/fifo_19.v	/^input rst;$/;"	p
rst1	ok_library/okLibrary.v	/^	wire dcm_clk0, rstin, rst1, rst2, rst3, rst4; $/;"	n
rst2	ok_library/okLibrary.v	/^	wire dcm_clk0, rstin, rst1, rst2, rst3, rst4; $/;"	n
rst3	ok_library/okLibrary.v	/^	wire dcm_clk0, rstin, rst1, rst2, rst3, rst4; $/;"	n
rst4	ok_library/okLibrary.v	/^	wire dcm_clk0, rstin, rst1, rst2, rst3, rst4; $/;"	n
rstin	ok_library/okLibrary.v	/^	wire dcm_clk0, rstin, rst1, rst2, rst3, rst4; $/;"	n
rtr_data	pid_controller.v	/^wire	[W_PID-1:0]				rtr_data[0:N_OUT-1];$/;"	n
rtr_data_valid	pid_controller.v	/^wire	[N_OUT-1:0]				rtr_data_valid;$/;"	n
rtr_dest_sel	pid_controller.v	/^wire	[W_RTR_SEL-1:0]		rtr_dest_sel;$/;"	n
rtr_dest_sel_owi	test_fixtures/pid_controller_tf.v	/^	parameter rtr_dest_sel_owi			= 8'h0a;$/;"	c
rtr_dest_sel_owi	test_fixtures/tle_adc_controller_tf.v	/^	parameter rtr_dest_sel_owi			= 8'h0a;$/;"	c
rtr_dest_sel_wire	frontpanel_interface.v	/^wire	[15:0]	rtr_dest_sel_wire;$/;"	n
rtr_input_bus	pid_controller.v	/^wire	[W_PIDV*N_ADC-1:0]	rtr_input_bus;$/;"	n
rtr_lock_en	pid_controller.v	/^wire	[N_OUT-1:0]				rtr_lock_en;$/;"	n
rtr_output_active	pid_controller.v	/^wire	[N_OUT-1:0]				rtr_output_active;$/;"	n
rtr_output_active_owi	test_fixtures/pid_controller_tf.v	/^	parameter rtr_output_active_owi	= 8'h16;$/;"	c
rtr_output_active_owi	test_fixtures/tle_adc_controller_tf.v	/^	parameter rtr_output_active_owi	= 8'h16;$/;"	c
rtr_output_active_wire	frontpanel_interface.v	/^wire	[15:0]	rtr_output_active_wire;$/;"	n
rtr_output_bus	pid_controller.v	/^wire	[W_PIDV*N_OUT-1:0]	rtr_output_bus;$/;"	n
rtr_src_sel	pid_controller.v	/^wire	[W_RTR_SEL-1:0]		rtr_src_sel;$/;"	n
rtr_src_sel_owi	test_fixtures/pid_controller_tf.v	/^	parameter rtr_src_sel_owi			= 8'h09;$/;"	c
rtr_src_sel_owi	test_fixtures/tle_adc_controller_tf.v	/^	parameter rtr_src_sel_owi			= 8'h09;$/;"	c
rtr_src_sel_wire	frontpanel_interface.v	/^wire	[15:0]	rtr_src_sel_wire;$/;"	n
sample_counter	oversample_filter.v	/^reg	[MAX_OS:0]	sample_counter;$/;"	r
sclk_out	test_fixtures/adc_controller_tf.v	/^	wire sclk_out;$/;"	n
signed	output_preprocessor.v	/^reg signed	[W_OUT-1:0]	multiplier; 					\/\/ active output multiplication factor$/;"	r
signed	output_preprocessor.v	/^reg signed	[W_OUT-1:0] data_out_prev;					\/\/ previous outputed data$/;"	r
signed	output_preprocessor.v	/^reg signed	[W_OUT-1:0] lock_data_raw;	 				\/\/ raw lock data$/;"	r
signed	output_preprocessor.v	/^reg signed	[W_OUT-1:0] output_init;					\/\/ active output initial value$/;"	r
signed	output_preprocessor.v	/^reg signed	[W_OUT-1:0] output_min;						\/\/ active output lower bound$/;"	r
signed	output_preprocessor.v	/^reg signed 	[W_OUT-1:0] output_max; 					\/\/ active output upper bound$/;"	r
signed	output_preprocessor.v	/^wire signed	[W_OUT-1:0] proc_stage [0:4];				\/\/ data processing stages$/;"	n
signed	pid_core.v	/^reg signed	[W_OUT-1:0]	d_coef;				\/\/ active derivative coefficient$/;"	r
signed	pid_core.v	/^reg signed	[W_OUT-1:0]	data;					\/\/ active input data$/;"	r
signed	pid_core.v	/^reg signed	[W_OUT-1:0]	e_prev	[0:1];	\/\/ previous two error signals$/;"	r
signed	pid_core.v	/^reg signed	[W_OUT-1:0]	i_coef;				\/\/ active integral coefficient$/;"	r
signed	pid_core.v	/^reg signed	[W_OUT-1:0]	setpoint;			\/\/ active lock setpoint$/;"	r
signed	pid_core.v	/^reg signed	[W_OUT-1:0]	u_prev;				\/\/ previous pid filter output$/;"	r
signed	pid_core.v	/^reg signed	[W_OUT-1:0] u_next; 				\/\/ next pid filter output$/;"	r
signed	pid_core.v	/^reg signed 	[W_OUT-1:0]	p_coef;				\/\/ active proportional coefficient$/;"	r
signed	pid_core.v	/^wire signed	[W_OUT-1:0]	e_cur;				\/\/ current error signal$/;"	n
signed	pid_core.v	/^wire signed	[W_OUT-1:0]	k1, k2, k3; 		\/\/ z-transform coefficients for discrete PID filter$/;"	n
signed	pid_core.v	/^wire signed	[W_OUT-1:0] delta_u;				\/\/ difference between current and previous pid filter outputs$/;"	n
signed	pid_core.v	/^wire signed	[W_OUT-1:0] u_cur; 				\/\/ current pid filter output$/;"	n
src_select	router.v	/^reg	[W_SEL-1:0]		src_select		[0:N_OUT-1];		\/\/ registered source channels$/;"	r
sum	oversample_filter.v	/^reg	[W_SUM-1:0]	sum;$/;"	r
sys_clk_in	test_fixtures/pipe_tx_fifo_tf.v	/^	reg sys_clk_in;$/;"	r
sys_reset	pid_controller.v	/^wire								sys_reset;$/;"	n
sys_reset_ti	test_fixtures/pid_controller_tf.v	/^	parameter sys_reset_ti				= 8'h58;$/;"	c
sys_reset_ti	test_fixtures/tle_adc_controller_tf.v	/^	parameter sys_reset_ti				= 8'h58;$/;"	c
sys_reset_trig	frontpanel_interface.v	/^wire	[15:0]	sys_reset_trig;$/;"	n
tCK	ok_sim/okHostCalls.v	/^parameter tCK = 10.417; \/\/ Half of the hi_clk frequency @ 1ns timing$/;"	c
ti_addr	ok_sim/mappings.v	/^wire [7:0]  ti_addr        = ok1[OK_TI_ADDR_END:OK_TI_ADDR_START];$/;"	n
ti_blockstrobe	ok_sim/mappings.v	/^wire        ti_blockstrobe = ok1[OK_TI_BLOCKSTROBE];/;"	n
ti_clk_in	test_fixtures/pipe_tx_fifo_tf.v	/^	reg ti_clk_in;$/;"	r
ti_clock	ok_sim/mappings.v	/^wire        ti_clock       = ok1[OK_TI_CLK];$/;"	n
ti_datain	ok_sim/mappings.v	/^wire [15:0] ti_datain      = ok1[OK_TI_DATAIN_END:OK_TI_DATAIN_START];$/;"	n
ti_read	ok_sim/mappings.v	/^wire        ti_read        = ok1[OK_TI_READ];$/;"	n
ti_reset	ok_sim/mappings.v	/^wire        ti_reset       = ok1[OK_TI_RESET];$/;"	n
ti_trigupdate	ok_sim/mappings.v	/^wire        ti_trigupdate  = ok1[OK_TI_TRIGUPDATE];$/;"	n
ti_wireupdate	ok_sim/mappings.v	/^wire        ti_wireupdate  = ok1[OK_TI_WIREUPDATE];$/;"	n
ti_write	ok_sim/mappings.v	/^wire        ti_write       = ok1[OK_TI_WRITE];$/;"	n
ticlk	frontpanel_interface.v	/^wire 						ticlk;$/;"	n
tle_adc_controller_tf	test_fixtures/tle_adc_controller_tf.v	/^module tle_adc_controller_tf;$/;"	m
tmp	ok_sim/okHostCalls.v	/^   reg   [15:0]   tmp;$/;"	r
trighold	ok_sim/okTriggerOut.v	/^reg  [15:0] trighold;$/;"	r
tx_data	dac_controller.v	/^reg	[31:0]	tx_data;$/;"	r
tx_data	dds_controller.v	/^reg	[63:0] 	tx_data; 				\/\/ active data to be sent to dds $/;"	r
update_in	test_fixtures/adc_controller_tf.v	/^	reg update_in;$/;"	r
valid	ip_core/fifo_19.v	/^output valid;$/;"	p
wire	adc_controller.v	/^	input wire						busy_in,				\/\/ conversion busy signal$/;"	p
wire	adc_controller.v	/^	input wire						cstart_in,			\/\/ pulse starts continuous adc conversion cycle$/;"	p
wire	adc_controller.v	/^	input wire						data_a_in,			\/\/ serial data channel a$/;"	p
wire	adc_controller.v	/^	input wire						data_b_in,			\/\/ serial data channel b$/;"	p
wire	adc_controller.v	/^	input wire						update_in,			\/\/ pulse triggers update of frontpanel parameters$/;"	p
wire	adc_controller.v	/^	input wire	[2:0]				os_in,				\/\/ sets adc oversampling mode$/;"	p
wire	adc_controller.v	/^	output wire						convst_out,			\/\/ convert start signal to adc$/;"	p
wire	adc_controller.v	/^	output wire						n_cs_out,			\/\/ chip select signal to adc$/;"	p
wire	adc_controller.v	/^	output wire						reset_out,			\/\/ reset signal to adc$/;"	p
wire	adc_controller.v	/^	output wire						sclk_out, 			\/\/ serial clock signal to adc$/;"	p
wire	adc_controller.v	/^	output wire				[N_CHAN-1:0]	data_valid_out,	\/\/ one-hot encoded output data valid signal$/;"	p
wire	adc_controller.v	/^	output wire	[2:0]				os_out,				\/\/ oversampling signal to adc$/;"	p
wire	clk_sync.v	/^	input wire						reset_in,		\/\/ system reset$/;"	p
wire	clk_sync.v	/^	input wire						sys_clk_in,		\/\/ 50MHz system clock$/;"	p
wire	clk_sync.v	/^	input wire	[N_ADC-1:0]		data_valid_in,	\/\/ data valid input signal synchronous with 17MHz adc clock$/;"	p
wire	clk_sync.v	/^	input wire	[W_DATA-1:0]	data_a_in,$/;"	p
wire	clk_sync.v	/^	input wire	[W_DATA-1:0]	data_b_in,$/;"	p
wire	clk_sync.v	/^	output wire	[N_ADC-1:0]		data_valid_out,$/;"	p
wire	dac_controller.v	/^	input wire						data_valid_in,$/;"	p
wire	dac_controller.v	/^	input wire						ref_set_in,		\/\/ dac sets reference voltage when asserted$/;"	p
wire	dac_controller.v	/^	input wire	[W_CHS-1:0]		channel_in,$/;"	p
wire	dac_controller.v	/^	input wire	[W_DATA-1:0]	data_in,$/;"	p
wire	dac_controller.v	/^	output wire						dac_done_out,	\/\/ pulsed when dac finishes updating a channels$/;"	p
wire	dac_controller.v	/^	output wire	[W_CHS-1:0]		channel_out		\/\/ output data valid$/;"	p
wire	dac_controller.v	/^	output wire	[W_DATA-1:0]	data_out,		\/\/ output data$/;"	p
wire	dac_controller.v	/^	output wire 					din_out, 		\/\/ serial data input$/;"	p
wire	dac_controller.v	/^	output wire 					nclr_out, 		\/\/ asynchronous clear$/;"	p
wire	dac_controller.v	/^	output wire 					nldac_out, 		\/\/ load DACs$/;"	p
wire	dac_controller.v	/^	output wire 					nsync_out, 		\/\/ enables input shift register to get data$/;"	p
wire	dac_controller.v	/^	output wire 					sclk_out, 		\/\/ serial clock input (max = 50MHz)$/;"	p
wire	dac_instr_queue.v	/^	input wire								rd_ack_in,		\/\/ read acknowledge causes next data word to be presented (if one exists)$/;"	p
wire	dac_instr_queue.v	/^	input wire [N_CHAN-1:0]				data_valid_in,	\/\/ data valid signal$/;"	p
wire	dac_instr_queue.v	/^	input wire [W_DATA*N_CHAN-1:0]	data_bus_in,	\/\/ input channels on a single bus$/;"	p
wire	dac_instr_queue.v	/^	output wire								data_valid_out	\/\/ output data valid signal$/;"	p
wire	dac_instr_queue.v	/^	output wire	[W_CHS-1:0]				chan_out,		\/\/ dac channel associated with output data$/;"	p
wire	dac_instr_queue.v	/^	output wire [W_DATA-1:0]			data_out,		\/\/ output data$/;"	p
wire	dds_controller.v	/^	input wire				amp_valid_in, 		\/\/ amplitude data valid signal$/;"	p
wire	dds_controller.v	/^	input wire				clk_in,				\/\/ system clock $/;"	p
wire	dds_controller.v	/^	input wire				freq_valid_in,		\/\/ frequency data valid signal $/;"	p
wire	dds_controller.v	/^	input wire				phase_valid_in,	\/\/ phase data valid signal $/;"	p
wire	dds_controller.v	/^	input wire				reset_in, 			\/\/ system reset$/;"	p
wire	dds_controller.v	/^	input wire	[13:0]	phase_in,			\/\/ phase data $/;"	p
wire	dds_controller.v	/^	input wire	[47:0]	freq_in,				\/\/ frequency data $/;"	p
wire	dds_controller.v	/^	input wire	[9:0]		amp_in,				\/\/ amplitude data $/;"	p
wire	dds_controller.v	/^	output wire				dds_done_out 		\/\/ pulsed to indicate dds has finished updating $/;"	p
wire	dds_controller.v	/^	output wire				io_update_out,		\/\/ io update signal to dds$/;"	p
wire	dds_controller.v	/^	output wire				reset_out,			\/\/ reset signal to dds$/;"	p
wire	dds_controller.v	/^	output wire				sclk_out,			\/\/ serial clock signal to dds$/;"	p
wire	dds_controller.v	/^	output wire				sdio_out,			\/\/ serial data line to dds$/;"	p
wire	frontpanel_interface.v	/^	inout wire										hi_aa,$/;"	p
wire	frontpanel_interface.v	/^	inout wire				[15:0]				hi_inout,$/;"	p
wire	frontpanel_interface.v	/^	input wire				[7:0]					hi_in,$/;"	p
wire	frontpanel_interface.v	/^	input wire				[N_ADC-1:0]			adc_data_valid_in,$/;"	p
wire	frontpanel_interface.v	/^	input wire				[W_ADC-1:0]			adc_data_a_in,$/;"	p
wire	frontpanel_interface.v	/^	input wire				[W_ADC-1:0]			adc_data_b_in,$/;"	p
wire	frontpanel_interface.v	/^	output wire										adc_cstart_out, 				\/\/ dm$/;"	p
wire	frontpanel_interface.v	/^	output wire										dac_ref_set_out, 				\/\/ dm (in global module)$/;"	p
wire	frontpanel_interface.v	/^	output wire										hi_muxsel,$/;"	p
wire	frontpanel_interface.v	/^	output wire										i2c_scl,$/;"	p
wire	frontpanel_interface.v	/^	output wire										i2c_sda,$/;"	p
wire	frontpanel_interface.v	/^	output wire										module_update_out,			\/\/ triggered when any parameter is updated$/;"	p
wire	frontpanel_interface.v	/^	output wire										sys_reset_out, 				\/\/ system reset$/;"	p
wire	frontpanel_interface.v	/^	output wire				[15:0]				pid_setpoint_out,				\/\/ dm$/;"	p
wire	frontpanel_interface.v	/^	output wire				[1:0]					hi_out,$/;"	p
wire	frontpanel_interface.v	/^	output wire				[2:0]					adc_os_out,						\/\/ dm$/;"	p
wire	frontpanel_interface.v	/^	output wire				[3:0]					rtr_dest_sel_out,				\/\/ dm (in output module)$/;"	p
wire	frontpanel_interface.v	/^	output wire				[3:0]					rtr_src_sel_out,				\/\/ dm (in osf module)$/;"	p
wire	frontpanel_interface.v	/^	output wire				[47:0]				opp_init_out,					\/\/ dm$/;"	p
wire	frontpanel_interface.v	/^	output wire				[47:0]				opp_max_out,					\/\/ dm$/;"	p
wire	frontpanel_interface.v	/^	output wire				[47:0]				opp_min_out,					\/\/ dm$/;"	p
wire	frontpanel_interface.v	/^	output wire				[7:0]					opp_multiplier_out, 			\/\/ dm$/;"	p
wire	frontpanel_interface.v	/^	output wire				[N_ADC-1:0]			osf_activate_out,				\/\/ dm$/;"	p
wire	frontpanel_interface.v	/^	output wire				[N_ADC-1:0]			osf_update_en_out, 			\/\/ computed on osf param change$/;"	p
wire	frontpanel_interface.v	/^	output wire				[N_ADC-1:0]			pid_clear_out,$/;"	p
wire	frontpanel_interface.v	/^	output wire				[N_ADC-1:0]			pid_lock_en_out,$/;"	p
wire	frontpanel_interface.v	/^	output wire				[N_ADC-1:0]			pid_update_en_out, 			\/\/ computed on osf param change$/;"	p
wire	frontpanel_interface.v	/^	output wire				[N_OUT-1:0]			opp_update_en_out, 			\/\/ computed on opp param change$/;"	p
wire	frontpanel_interface.v	/^	output wire				[N_OUT-1:0]			rtr_output_active_out,		\/\/ dm$/;"	p
wire	frontpanel_interface.v	/^	output wire				[W_OSF_CD-1:0]		osf_cycle_delay_out, 		\/\/ dm$/;"	p
wire	frontpanel_interface.v	/^	output wire				[W_OSF_OSM-1:0]	osf_osm_out, 					\/\/ computed from osf_ovr$/;"	p
wire	frontpanel_interface.v	/^	output wire [17:0] adc_data0_db$/;"	p
wire	frontpanel_interface.v	/^	output wire signed	[15:0]				pid_d_coef_out,				\/\/ dm$/;"	p
wire	frontpanel_interface.v	/^	output wire signed	[15:0]				pid_i_coef_out,				\/\/ dm$/;"	p
wire	frontpanel_interface.v	/^	output wire signed	[15:0]				pid_p_coef_out,				\/\/ dm$/;"	p
wire	mux_n_chan.v	/^	output wire[W_CHAN-1:0]			data_out				\/\/ data out bus$/;"	p
wire	ok_library/okLibrary.v	/^	inout  wire        hi_aa,$/;"	p
wire	ok_library/okLibrary.v	/^	inout  wire [15:0] hi_inout,$/;"	p
wire	ok_library/okLibrary.v	/^	input  wire [16:0] ok2$/;"	p
wire	ok_library/okLibrary.v	/^	input  wire [7:0]  hi_in,$/;"	p
wire	ok_library/okLibrary.v	/^	input  wire [N*17-1:0] ok2s$/;"	p
wire	ok_library/okLibrary.v	/^	output wire        ti_clk,$/;"	p
wire	ok_library/okLibrary.v	/^	output wire [1:0]  hi_out,$/;"	p
wire	ok_library/okLibrary.v	/^	output wire [30:0] ok1,$/;"	p
wire	ok_sim/okBTPipeIn.v	/^	input  wire        ep_ready$/;"	p
wire	ok_sim/okBTPipeIn.v	/^	input  wire [30:0] ok1,$/;"	p
wire	ok_sim/okBTPipeIn.v	/^	input  wire [7:0]  ep_addr,$/;"	p
wire	ok_sim/okBTPipeIn.v	/^	output wire        ep_blockstrobe,$/;"	p
wire	ok_sim/okBTPipeIn.v	/^	output wire [16:0] ok2,$/;"	p
wire	ok_sim/okBTPipeOut.v	/^	input  wire        ep_ready$/;"	p
wire	ok_sim/okBTPipeOut.v	/^	input  wire [15:0] ep_datain,$/;"	p
wire	ok_sim/okBTPipeOut.v	/^	input  wire [30:0] ok1,$/;"	p
wire	ok_sim/okBTPipeOut.v	/^	input  wire [7:0]  ep_addr,$/;"	p
wire	ok_sim/okBTPipeOut.v	/^	output wire        ep_blockstrobe,$/;"	p
wire	ok_sim/okBTPipeOut.v	/^	output wire        ep_read,$/;"	p
wire	ok_sim/okBTPipeOut.v	/^	output wire [16:0] ok2,$/;"	p
wire	ok_sim/okHost.v	/^	inout   wire        hi_aa,$/;"	p
wire	ok_sim/okHost.v	/^	inout   wire [15:0] hi_inout,$/;"	p
wire	ok_sim/okHost.v	/^	input   wire [16:0] ok2$/;"	p
wire	ok_sim/okHost.v	/^	input   wire [7:0]  hi_in,$/;"	p
wire	ok_sim/okHost.v	/^	output  wire        ti_clk,$/;"	p
wire	ok_sim/okHost.v	/^	output  wire [30:0] ok1,$/;"	p
wire	ok_sim/okHost_XEM5010.v	/^	inout   wire [15:0] hi_inout,$/;"	p
wire	ok_sim/okHost_XEM5010.v	/^	input   wire [16:0] ok2$/;"	p
wire	ok_sim/okHost_XEM5010.v	/^	input   wire [7:0]  hi_in,$/;"	p
wire	ok_sim/okHost_XEM5010.v	/^	output  wire        ti_clk,$/;"	p
wire	ok_sim/okHost_XEM5010.v	/^	output  wire [1:0]  hi_out,$/;"	p
wire	ok_sim/okHost_XEM5010.v	/^	output  wire [30:0] ok1,$/;"	p
wire	ok_sim/okPipeIn.v	/^	input  wire [30:0] ok1,$/;"	p
wire	ok_sim/okPipeIn.v	/^	input  wire [7:0]  ep_addr,$/;"	p
wire	ok_sim/okPipeIn.v	/^	output wire [16:0] ok2,$/;"	p
wire	ok_sim/okPipeOut.v	/^	input  wire [15:0] ep_datain$/;"	p
wire	ok_sim/okPipeOut.v	/^	input  wire [30:0] ok1,$/;"	p
wire	ok_sim/okPipeOut.v	/^	input  wire [7:0]  ep_addr,$/;"	p
wire	ok_sim/okPipeOut.v	/^	output wire        ep_read,$/;"	p
wire	ok_sim/okPipeOut.v	/^	output wire [16:0] ok2,$/;"	p
wire	ok_sim/okTriggerIn.v	/^	input  wire        ep_clk,$/;"	p
wire	ok_sim/okTriggerIn.v	/^	input  wire [30:0] ok1,$/;"	p
wire	ok_sim/okTriggerIn.v	/^	input  wire [7:0]  ep_addr,$/;"	p
wire	ok_sim/okTriggerOut.v	/^	input  wire        ep_clk,$/;"	p
wire	ok_sim/okTriggerOut.v	/^	input  wire [15:0] ep_trigger$/;"	p
wire	ok_sim/okTriggerOut.v	/^	input  wire [30:0] ok1,$/;"	p
wire	ok_sim/okTriggerOut.v	/^	input  wire [7:0]  ep_addr,$/;"	p
wire	ok_sim/okTriggerOut.v	/^	output wire [16:0] ok2,$/;"	p
wire	ok_sim/okWireIn.v	/^	input  wire [30:0] ok1,$/;"	p
wire	ok_sim/okWireIn.v	/^	input  wire [7:0]  ep_addr,$/;"	p
wire	ok_sim/okWireOR.v	/^	input  wire [N*17-1:0] ok2s$/;"	p
wire	ok_sim/okWireOut.v	/^	input  wire [15:0] ep_datain$/;"	p
wire	ok_sim/okWireOut.v	/^	input  wire [30:0] ok1,$/;"	p
wire	ok_sim/okWireOut.v	/^	input  wire [7:0]  ep_addr,$/;"	p
wire	ok_sim/okWireOut.v	/^	output wire [16:0] ok2,$/;"	p
wire	output_preprocessor.v	/^	input wire								data_valid_in,		\/\/ data valid signal$/;"	p
wire	output_preprocessor.v	/^	input wire								lock_en_in,			\/\/ lock enable signal, opp outputs constant value if lock disables$/;"	p
wire	output_preprocessor.v	/^	input wire								update_en_in,		\/\/ module becomes sensitive to update signal when asserted$/;"	p
wire	output_preprocessor.v	/^	input wire								update_in,			\/\/ pulse triggers update of module frontpanel parameters$/;"	p
wire	output_preprocessor.v	/^	input wire signed		[7:0]			multiplier_in,		\/\/ output multiplication factor$/;"	p
wire	output_preprocessor.v	/^	input wire signed		[W_IN-1:0]	data_in,				\/\/ input data bus$/;"	p
wire	output_preprocessor.v	/^	input wire signed		[W_OUT-1:0]	output_init_in,	\/\/ initial output value$/;"	p
wire	output_preprocessor.v	/^	input wire signed		[W_OUT-1:0]	output_max_in,		\/\/ output lower bound$/;"	p
wire	output_preprocessor.v	/^	input wire signed		[W_OUT-1:0]	output_min_in,		\/\/ output upper bound$/;"	p
wire	output_preprocessor.v	/^	output wire								data_valid_out		\/\/ output data valid signal$/;"	p
wire	output_preprocessor.v	/^	output wire	signed	[W_OUT-1:0]	data_out,			\/\/ output data$/;"	p
wire	oversample_filter.v	/^	input wire								activate_in,		\/\/ channel activation signal (1 = activated, 0 = deactivated)$/;"	p
wire	oversample_filter.v	/^	input wire								data_valid_in,		\/\/ input data valid signal; asynchronous timing supported$/;"	p
wire	oversample_filter.v	/^	input wire								update_en_in,		\/\/ sensistizes module to update signal$/;"	p
wire	oversample_filter.v	/^	input wire								update_in,			\/\/ pulse triggers update of frontpanel parameters$/;"	p
wire	oversample_filter.v	/^	input wire				[15:0]		cycle_delay_in,	\/\/ delay period in adc cycles$/;"	p
wire	oversample_filter.v	/^	input wire				[W_OSM-1:0]	osm_in,				\/\/ oversample mode (log base 2 of the oversample ratio)$/;"	p
wire	oversample_filter.v	/^	input wire signed		[W_IN-1:0]	data_in,				\/\/ input data$/;"	p
wire	oversample_filter.v	/^	output wire								data_valid_out		\/\/ output data valid signal$/;"	p
wire	oversample_filter.v	/^	output wire signed	[W_OUT-1:0]	data_out,			\/\/ output data$/;"	p
wire	pid_controller.v	/^	inout wire							hi_aa,$/;"	p
wire	pid_controller.v	/^	inout wire		[15:0]			hi_inout,$/;"	p
wire	pid_controller.v	/^	input wire							adc_busy_in,$/;"	p
wire	pid_controller.v	/^	input wire							adc_data_a_in,$/;"	p
wire	pid_controller.v	/^	input wire							adc_data_b_in,$/;"	p
wire	pid_controller.v	/^	input wire		[7:0]				hi_in,$/;"	p
wire	pid_controller.v	/^	output wire							adc_convst_out,$/;"	p
wire	pid_controller.v	/^	output wire							adc_n_cs_out,$/;"	p
wire	pid_controller.v	/^	output wire							adc_reset_out,$/;"	p
wire	pid_controller.v	/^	output wire							adc_sclk_out,$/;"	p
wire	pid_controller.v	/^	output wire							dac_din_out,$/;"	p
wire	pid_controller.v	/^	output wire							dac_nclr_out,$/;"	p
wire	pid_controller.v	/^	output wire							dac_nldac_out,$/;"	p
wire	pid_controller.v	/^	output wire							dac_nsync_out,$/;"	p
wire	pid_controller.v	/^	output wire							dac_sclk_out,$/;"	p
wire	pid_controller.v	/^	output wire							hi_muxsel,$/;"	p
wire	pid_controller.v	/^	output wire							i2c_scl,$/;"	p
wire	pid_controller.v	/^	output wire							i2c_sda,$/;"	p
wire	pid_controller.v	/^	output wire							n_out_buf_en,	\/\/ breakout board output buffer enable (active low)$/;"	p
wire	pid_controller.v	/^	output wire		[1:0]				hi_out,$/;"	p
wire	pid_controller.v	/^	output wire		[2:0]				adc_os_out,$/;"	p
wire	pid_controller.v	/^	output wire		[N_DDS-1:0]		dds_csb_out,$/;"	p
wire	pid_controller.v	/^	output wire		[N_DDS-1:0]		dds_io_update_out,$/;"	p
wire	pid_controller.v	/^	output wire		[N_DDS-1:0]		dds_reset_out,$/;"	p
wire	pid_controller.v	/^	output wire		[N_DDS-1:0]		dds_sclk_out,$/;"	p
wire	pid_controller.v	/^	output wire		[N_DDS-1:0]		dds_sdio_out,$/;"	p
wire	pid_controller.v	/^	output wire [2:0] adc_os_db,$/;"	p
wire	pid_controller.v	/^	output wire adc_busy_db,$/;"	p
wire	pid_controller.v	/^	output wire adc_convst_db,$/;"	p
wire	pid_controller.v	/^	output wire adc_cstart_db,$/;"	p
wire	pid_controller.v	/^	output wire adc_data_a_db,$/;"	p
wire	pid_controller.v	/^	output wire adc_data_b_db,$/;"	p
wire	pid_controller.v	/^	output wire adc_data_valid_db,$/;"	p
wire	pid_controller.v	/^	output wire adc_n_cs_db,$/;"	p
wire	pid_controller.v	/^	output wire adc_reset_db,$/;"	p
wire	pid_controller.v	/^	output wire adc_sclk_db,$/;"	p
wire	pid_controller.v	/^	output wire clk17_db$/;"	p
wire	pid_controller.v	/^	output wire mod_update_db,$/;"	p
wire	pid_controller.v	/^	output wire[6:0] adc_data_a_vect_db,$/;"	p
wire	pid_core.v	/^	input wire								clear_in,		\/\/ clears pid memory$/;"	p
wire	pid_core.v	/^	input wire								data_valid_in,	\/\/ input data valid signal$/;"	p
wire	pid_core.v	/^	input wire								lock_en_in,		\/\/ enables pid filter$/;"	p
wire	pid_core.v	/^	input wire								update_en_in,	\/\/ sensitizes module to update signal$/;"	p
wire	pid_core.v	/^	input wire								update_in, 		\/\/ pulse triggers update of frontpanel parameters$/;"	p
wire	pid_core.v	/^	input wire signed		[15:0] 		setpoint_in,	\/\/ lock setpoint$/;"	p
wire	pid_core.v	/^	input wire signed 	[15:0] 		d_coef_in,		\/\/ derivative coefficient$/;"	p
wire	pid_core.v	/^	input wire signed 	[15:0] 		i_coef_in,		\/\/ integral coefficient$/;"	p
wire	pid_core.v	/^	input wire signed 	[15:0] 		p_coef_in,		\/\/ proportional coefficient$/;"	p
wire	pid_core.v	/^	input wire signed 	[W_IN-1:0]	data_in, 		\/\/ unsigned input data$/;"	p
wire	pid_core.v	/^	output wire								data_valid_out	\/\/ output data valid signal$/;"	p
wire	pid_core.v	/^	output wire signed	[W_OUT-1:0]	data_out,		\/\/ pid filter output$/;"	p
wire	pipe_tx_fifo.v	/^	input wire										pipe_read_in,$/;"	p
wire	pipe_tx_fifo.v	/^	input wire										reset_in,$/;"	p
wire	pipe_tx_fifo.v	/^	input wire										sys_clk_in,$/;"	p
wire	pipe_tx_fifo.v	/^	input wire										ti_clk_in,$/;"	p
wire	pipe_tx_fifo.v	/^	input wire						 				data_valid_in,$/;"	p
wire	pipe_tx_fifo.v	/^	input wire 				[15:0] 				data_in,$/;"	p
wire	pipe_tx_fifo.v	/^	output wire				[15:0]				data_out$/;"	p
wire	router.v	/^	input wire								update_in,			\/\/ update frontpanel params$/;"	p
wire	router.v	/^	input wire	[N_OUT-1:0]				output_active_in,	\/\/ output channel activation signals$/;"	p
wire	router.v	/^	input wire	[W_CHAN*N_IN-1:0]		data_bus_in,		\/\/ input channels on a single bus$/;"	p
wire	router.v	/^	input wire	[W_SEL-1:0]				dest_select_in,	\/\/ destination channel select$/;"	p
wire	router.v	/^	input wire	[W_SEL-1:0]				src_select_in,		\/\/ source channel select$/;"	p
wire	router.v	/^	output wire	[W_CHAN*N_OUT-1:0]	data_bus_out		\/\/ output channels on a single bus$/;"	p
wire_out	test_fixtures/pid_controller_tf.v	/^	reg [15:0] wire_out;$/;"	r
wire_out	test_fixtures/tle_adc_controller_tf.v	/^	reg [15:0] wire_out;$/;"	r
wirehold	ok_sim/okWireOut.v	/^reg  [15:0] wirehold;$/;"	r
wr_clk	ip_core/fifo_16.v	/^input wr_clk;$/;"	p
wr_clk_period_by_2	ip_core/fifo_16/simulation/fifo_16_tb.vhd	/^ CONSTANT wr_clk_period_by_2 : TIME := 100 ns;$/;"	c
wr_clk_period_by_2	ip_core/fifo_19/simulation/fifo_19_tb.vhd	/^ CONSTANT wr_clk_period_by_2 : TIME := 100 ns;$/;"	c
wr_en	ip_core/fifo_16.v	/^input wr_en;$/;"	p
wr_en	ip_core/fifo_19.v	/^input wr_en;$/;"	p
